// Generated from CPnextParser.g4 by ANTLR 4.9.2
// jshint ignore: start
import antlr4 from 'antlr4';
import CPnextParserVisitor from './CPnextParserVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003_\u02e3\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u0003\u0002\u0007\u0002",
    "n\n\u0002\f\u0002\u000e\u0002q\u000b\u0002\u0003\u0002\u0007\u0002t",
    "\n\u0002\f\u0002\u000e\u0002w\u000b\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0007\u0003~\n\u0003\f\u0003\u000e\u0003",
    "\u0081\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u0088\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0090\n\u0005\f\u0005",
    "\u000e\u0005\u0093\u000b\u0005\u0003\u0005\u0007\u0005\u0096\n\u0005",
    "\f\u0005\u000e\u0005\u0099\u000b\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0007\u0006\u00a1\n\u0006",
    "\f\u0006\u000e\u0006\u00a4\u000b\u0006\u0003\u0006\u0007\u0006\u00a7",
    "\n\u0006\f\u0006\u000e\u0006\u00aa\u000b\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u00ae\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0007\u0007\u00bd\n\u0007",
    "\f\u0007\u000e\u0007\u00c0\u000b\u0007\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0007\b\u00c8\n\b\f\b\u000e\b\u00cb\u000b\b\u0003",
    "\b\u0003\b\u0006\b\u00cf\n\b\r\b\u000e\b\u00d0\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u00db\n\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u00e4\n\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00f6\n\t",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u00fc\n\n\f\n\u000e\n\u00ff",
    "\u000b\n\u0003\n\u0005\n\u0102\n\n\u0003\n\u0003\n\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u0108\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0112\n\f\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u0118\n\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u0135\n\r\f\r\u000e",
    "\r\u0138\u000b\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0005\u000e\u0146\n\u000e\u0003\u000f\u0003\u000f",
    "\u0006\u000f\u014a\n\u000f\r\u000f\u000e\u000f\u014b\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0006\u0010\u0153\n\u0010",
    "\r\u0010\u000e\u0010\u0154\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u015d\n\u0011\f\u0011\u000e",
    "\u0011\u0160\u000b\u0011\u0003\u0011\u0007\u0011\u0163\n\u0011\f\u0011",
    "\u000e\u0011\u0166\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u0170",
    "\n\u0012\f\u0012\u000e\u0012\u0173\u000b\u0012\u0003\u0012\u0007\u0012",
    "\u0176\n\u0012\f\u0012\u000e\u0012\u0179\u000b\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u0190\n\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u0194\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0198",
    "\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015",
    "\u019e\n\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u01a2\n\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u01a6\n\u0015\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u01aa\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u01be\n\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0007\u001a\u01c3\n\u001a\f\u001a\u000e\u001a",
    "\u01c6\u000b\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u01cb",
    "\n\u001b\f\u001b\u000e\u001b\u01ce\u000b\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01e1\n\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u01e7\n\u001d",
    "\f\u001d\u000e\u001d\u01ea\u000b\u001d\u0003\u001d\u0005\u001d\u01ed",
    "\n\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0005\u001e\u01f5\n\u001e\u0003\u001e\u0003\u001e\u0007",
    "\u001e\u01f9\n\u001e\f\u001e\u000e\u001e\u01fc\u000b\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0005\u001e\u0201\n\u001e\u0005\u001e\u0203",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0005\u001f\u0208\n\u001f",
    "\u0003\u001f\u0005\u001f\u020b\n\u001f\u0003\u001f\u0003\u001f\u0007",
    "\u001f\u020f\n\u001f\f\u001f\u000e\u001f\u0212\u000b\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0007 \u0220\n \f \u000e \u0223\u000b \u0003 \u0003",
    " \u0003 \u0003 \u0005 \u0229\n \u0003 \u0003 \u0003!\u0005!\u022e\n",
    "!\u0003!\u0003!\u0003!\u0005!\u0233\n!\u0003!\u0003!\u0003!\u0007!\u0238",
    "\n!\f!\u000e!\u023b\u000b!\u0003!\u0003!\u0003!\u0003!\u0007!\u0241",
    "\n!\f!\u000e!\u0244\u000b!\u0003!\u0003!\u0003!\u0003\"\u0005\"\u024a",
    "\n\"\u0003\"\u0003\"\u0005\"\u024e\n\"\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u0253\n\"\f\"\u000e\"\u0256\u000b\"\u0003\"\u0003\"\u0003\"\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u0262\n#\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u026c\n$\u0003%\u0003",
    "%\u0005%\u0270\n%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007",
    "&\u0279\n&\f&\u000e&\u027c\u000b&\u0003&\u0003&\u0003&\u0003&\u0005",
    "&\u0282\n&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0005",
    "\'\u028b\n\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0005(\u0292\n(\u0003",
    ")\u0003)\u0003*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003-\u0003",
    ".\u0003.\u0003/\u0003/\u0007/\u02a2\n/\f/\u000e/\u02a5\u000b/\u0003",
    "/\u0003/\u00030\u00030\u00030\u00030\u00050\u02ad\n0\u00031\u00031\u0007",
    "1\u02b1\n1\f1\u000e1\u02b4\u000b1\u00032\u00032\u00032\u00032\u0003",
    "3\u00033\u00034\u00034\u00035\u00035\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00075\u02c6\n5\f5\u000e5\u02c9\u000b5\u00035\u00055\u02cc",
    "\n5\u00035\u00035\u00035\u00075\u02d1\n5\f5\u000e5\u02d4\u000b5\u0003",
    "5\u00055\u02d7\n5\u00036\u00036\u00076\u02db\n6\f6\u000e6\u02de\u000b",
    "6\u00036\u00036\u00036\u00036\u0002\u0004\f\u00187\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.02468:<>@BDFHJLNPRTVXZ\\^`bdfhj\u0002\r\u0003\u0002&\'\u0005\u0002",
    "0044AA\u0003\u000213\u0003\u0002/0\u0003\u00028=\u0004\u0002QQ\\\\\u0004",
    "\u0002TT]]\u0004\u0002UU__\u0004\u0002SS^^\u0004\u0002VVZZ\u0004\u0002",
    "RR[[\u0002\u0326\u0002o\u0003\u0002\u0002\u0002\u0004z\u0003\u0002\u0002",
    "\u0002\u0006\u0087\u0003\u0002\u0002\u0002\b\u0089\u0003\u0002\u0002",
    "\u0002\n\u009e\u0003\u0002\u0002\u0002\f\u00b3\u0003\u0002\u0002\u0002",
    "\u000e\u00e3\u0003\u0002\u0002\u0002\u0010\u00f5\u0003\u0002\u0002\u0002",
    "\u0012\u00f7\u0003\u0002\u0002\u0002\u0014\u0105\u0003\u0002\u0002\u0002",
    "\u0016\u010c\u0003\u0002\u0002\u0002\u0018\u0117\u0003\u0002\u0002\u0002",
    "\u001a\u0145\u0003\u0002\u0002\u0002\u001c\u0147\u0003\u0002\u0002\u0002",
    "\u001e\u0150\u0003\u0002\u0002\u0002 \u0159\u0003\u0002\u0002\u0002",
    "\"\u016c\u0003\u0002\u0002\u0002$\u0181\u0003\u0002\u0002\u0002&\u0186",
    "\u0003\u0002\u0002\u0002(\u01a9\u0003\u0002\u0002\u0002*\u01ab\u0003",
    "\u0002\u0002\u0002,\u01ae\u0003\u0002\u0002\u0002.\u01b1\u0003\u0002",
    "\u0002\u00020\u01b6\u0003\u0002\u0002\u00022\u01bd\u0003\u0002\u0002",
    "\u00024\u01c7\u0003\u0002\u0002\u00026\u01e0\u0003\u0002\u0002\u0002",
    "8\u01e2\u0003\u0002\u0002\u0002:\u01f0\u0003\u0002\u0002\u0002<\u0207",
    "\u0003\u0002\u0002\u0002>\u0216\u0003\u0002\u0002\u0002@\u022d\u0003",
    "\u0002\u0002\u0002B\u0249\u0003\u0002\u0002\u0002D\u0261\u0003\u0002",
    "\u0002\u0002F\u026b\u0003\u0002\u0002\u0002H\u026f\u0003\u0002\u0002",
    "\u0002J\u0271\u0003\u0002\u0002\u0002L\u0286\u0003\u0002\u0002\u0002",
    "N\u028e\u0003\u0002\u0002\u0002P\u0293\u0003\u0002\u0002\u0002R\u0295",
    "\u0003\u0002\u0002\u0002T\u0297\u0003\u0002\u0002\u0002V\u0299\u0003",
    "\u0002\u0002\u0002X\u029b\u0003\u0002\u0002\u0002Z\u029d\u0003\u0002",
    "\u0002\u0002\\\u029f\u0003\u0002\u0002\u0002^\u02ac\u0003\u0002\u0002",
    "\u0002`\u02ae\u0003\u0002\u0002\u0002b\u02b5\u0003\u0002\u0002\u0002",
    "d\u02b9\u0003\u0002\u0002\u0002f\u02bb\u0003\u0002\u0002\u0002h\u02d6",
    "\u0003\u0002\u0002\u0002j\u02d8\u0003\u0002\u0002\u0002ln\u0005\u0004",
    "\u0003\u0002ml\u0003\u0002\u0002\u0002nq\u0003\u0002\u0002\u0002om\u0003",
    "\u0002\u0002\u0002op\u0003\u0002\u0002\u0002pu\u0003\u0002\u0002\u0002",
    "qo\u0003\u0002\u0002\u0002rt\u0005\u0006\u0004\u0002sr\u0003\u0002\u0002",
    "\u0002tw\u0003\u0002\u0002\u0002us\u0003\u0002\u0002\u0002uv\u0003\u0002",
    "\u0002\u0002vx\u0003\u0002\u0002\u0002wu\u0003\u0002\u0002\u0002xy\u0005",
    "\u0016\f\u0002y\u0003\u0003\u0002\u0002\u0002z\u007f\u0007\u0006\u0002",
    "\u0002{|\t\u0002\u0002\u0002|~\u00072\u0002\u0002}{\u0003\u0002\u0002",
    "\u0002~\u0081\u0003\u0002\u0002\u0002\u007f}\u0003\u0002\u0002\u0002",
    "\u007f\u0080\u0003\u0002\u0002\u0002\u0080\u0082\u0003\u0002\u0002\u0002",
    "\u0081\u007f\u0003\u0002\u0002\u0002\u0082\u0083\t\u0002\u0002\u0002",
    "\u0083\u0084\u0007J\u0002\u0002\u0084\u0005\u0003\u0002\u0002\u0002",
    "\u0085\u0088\u0005\b\u0005\u0002\u0086\u0088\u0005\n\u0006\u0002\u0087",
    "\u0085\u0003\u0002\u0002\u0002\u0087\u0086\u0003\u0002\u0002\u0002\u0088",
    "\u0007\u0003\u0002\u0002\u0002\u0089\u008a\u0007\u0007\u0002\u0002\u008a",
    "\u0091\u0005P)\u0002\u008b\u008c\u00078\u0002\u0002\u008c\u008d\u0005",
    "P)\u0002\u008d\u008e\u00079\u0002\u0002\u008e\u0090\u0003\u0002\u0002",
    "\u0002\u008f\u008b\u0003\u0002\u0002\u0002\u0090\u0093\u0003\u0002\u0002",
    "\u0002\u0091\u008f\u0003\u0002\u0002\u0002\u0091\u0092\u0003\u0002\u0002",
    "\u0002\u0092\u0097\u0003\u0002\u0002\u0002\u0093\u0091\u0003\u0002\u0002",
    "\u0002\u0094\u0096\u0005P)\u0002\u0095\u0094\u0003\u0002\u0002\u0002",
    "\u0096\u0099\u0003\u0002\u0002\u0002\u0097\u0095\u0003\u0002\u0002\u0002",
    "\u0097\u0098\u0003\u0002\u0002\u0002\u0098\u009a\u0003\u0002\u0002\u0002",
    "\u0099\u0097\u0003\u0002\u0002\u0002\u009a\u009b\u0007B\u0002\u0002",
    "\u009b\u009c\u0005\f\u0007\u0002\u009c\u009d\u0007J\u0002\u0002\u009d",
    "\t\u0003\u0002\u0002\u0002\u009e\u00a2\u0005T+\u0002\u009f\u00a1\u0005",
    "D#\u0002\u00a0\u009f\u0003\u0002\u0002\u0002\u00a1\u00a4\u0003\u0002",
    "\u0002\u0002\u00a2\u00a0\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002",
    "\u0002\u0002\u00a3\u00a8\u0003\u0002\u0002\u0002\u00a4\u00a2\u0003\u0002",
    "\u0002\u0002\u00a5\u00a7\u0005F$\u0002\u00a6\u00a5\u0003\u0002\u0002",
    "\u0002\u00a7\u00aa\u0003\u0002\u0002\u0002\u00a8\u00a6\u0003\u0002\u0002",
    "\u0002\u00a8\u00a9\u0003\u0002\u0002\u0002\u00a9\u00ad\u0003\u0002\u0002",
    "\u0002\u00aa\u00a8\u0003\u0002\u0002\u0002\u00ab\u00ac\u0007K\u0002",
    "\u0002\u00ac\u00ae\u0005\f\u0007\u0002\u00ad\u00ab\u0003\u0002\u0002",
    "\u0002\u00ad\u00ae\u0003\u0002\u0002\u0002\u00ae\u00af\u0003\u0002\u0002",
    "\u0002\u00af\u00b0\u0007B\u0002\u0002\u00b0\u00b1\u0005\u0016\f\u0002",
    "\u00b1\u00b2\u0007J\u0002\u0002\u00b2\u000b\u0003\u0002\u0002\u0002",
    "\u00b3\u00b4\b\u0007\u0001\u0002\u00b4\u00b5\u0005\u000e\b\u0002\u00b5",
    "\u00be\u0003\u0002\u0002\u0002\u00b6\u00b7\f\u0004\u0002\u0002\u00b7",
    "\u00b8\u0007.\u0002\u0002\u00b8\u00bd\u0005\f\u0007\u0005\u00b9\u00ba",
    "\f\u0003\u0002\u0002\u00ba\u00bb\u0007,\u0002\u0002\u00bb\u00bd\u0005",
    "\f\u0007\u0003\u00bc\u00b6\u0003\u0002\u0002\u0002\u00bc\u00b9\u0003",
    "\u0002\u0002\u0002\u00bd\u00c0\u0003\u0002\u0002\u0002\u00be\u00bc\u0003",
    "\u0002\u0002\u0002\u00be\u00bf\u0003\u0002\u0002\u0002\u00bf\r\u0003",
    "\u0002\u0002\u0002\u00c0\u00be\u0003\u0002\u0002\u0002\u00c1\u00c9\u0005",
    "\u0010\t\u0002\u00c2\u00c8\u0005\u0010\t\u0002\u00c3\u00c4\u00078\u0002",
    "\u0002\u00c4\u00c5\u0005N(\u0002\u00c5\u00c6\u00079\u0002\u0002\u00c6",
    "\u00c8\u0003\u0002\u0002\u0002\u00c7\u00c2\u0003\u0002\u0002\u0002\u00c7",
    "\u00c3\u0003\u0002\u0002\u0002\u00c8\u00cb\u0003\u0002\u0002\u0002\u00c9",
    "\u00c7\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca",
    "\u00e4\u0003\u0002\u0002\u0002\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cc",
    "\u00ce\u0007\b\u0002\u0002\u00cd\u00cf\u0005D#\u0002\u00ce\u00cd\u0003",
    "\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002\u0002\u0002\u00d0\u00ce\u0003",
    "\u0002\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u00d2\u0003",
    "\u0002\u0002\u0002\u00d2\u00d3\u0007N\u0002\u0002\u00d3\u00d4\u0005",
    "\f\u0007\u0002\u00d4\u00e4\u0003\u0002\u0002\u0002\u00d5\u00d6\u0007",
    "\t\u0002\u0002\u00d6\u00d7\u00078\u0002\u0002\u00d7\u00da\u0005\f\u0007",
    "\u0002\u00d8\u00d9\u0007-\u0002\u0002\u00d9\u00db\u0005\f\u0007\u0002",
    "\u00da\u00d8\u0003\u0002\u0002\u0002\u00da\u00db\u0003\u0002\u0002\u0002",
    "\u00db\u00dc\u0003\u0002\u0002\u0002\u00dc\u00dd\u00079\u0002\u0002",
    "\u00dd\u00e4\u0003\u0002\u0002\u0002\u00de\u00df\u0007\n\u0002\u0002",
    "\u00df\u00e0\u0005P)\u0002\u00e0\u00e1\u0007N\u0002\u0002\u00e1\u00e2",
    "\u0005\f\u0007\u0002\u00e2\u00e4\u0003\u0002\u0002\u0002\u00e3\u00c1",
    "\u0003\u0002\u0002\u0002\u00e3\u00cc\u0003\u0002\u0002\u0002\u00e3\u00d5",
    "\u0003\u0002\u0002\u0002\u00e3\u00de\u0003\u0002\u0002\u0002\u00e4\u000f",
    "\u0003\u0002\u0002\u0002\u00e5\u00f6\u0007\u000b\u0002\u0002\u00e6\u00f6",
    "\u0007\f\u0002\u0002\u00e7\u00f6\u0007\r\u0002\u0002\u00e8\u00f6\u0007",
    "\u000e\u0002\u0002\u00e9\u00f6\u0007\u000f\u0002\u0002\u00ea\u00f6\u0007",
    "\u0010\u0002\u0002\u00eb\u00f6\u0005R*\u0002\u00ec\u00f6\u0005\u0012",
    "\n\u0002\u00ed\u00ee\u0007D\u0002\u0002\u00ee\u00ef\u0005\f\u0007\u0002",
    "\u00ef\u00f0\u0007E\u0002\u0002\u00f0\u00f6\u0003\u0002\u0002\u0002",
    "\u00f1\u00f2\u0007H\u0002\u0002\u00f2\u00f3\u0005\f\u0007\u0002\u00f3",
    "\u00f4\u0007I\u0002\u0002\u00f4\u00f6\u0003\u0002\u0002\u0002\u00f5",
    "\u00e5\u0003\u0002\u0002\u0002\u00f5\u00e6\u0003\u0002\u0002\u0002\u00f5",
    "\u00e7\u0003\u0002\u0002\u0002\u00f5\u00e8\u0003\u0002\u0002\u0002\u00f5",
    "\u00e9\u0003\u0002\u0002\u0002\u00f5\u00ea\u0003\u0002\u0002\u0002\u00f5",
    "\u00eb\u0003\u0002\u0002\u0002\u00f5\u00ec\u0003\u0002\u0002\u0002\u00f5",
    "\u00ed\u0003\u0002\u0002\u0002\u00f5\u00f1\u0003\u0002\u0002\u0002\u00f6",
    "\u0011\u0003\u0002\u0002\u0002\u00f7\u00fd\u0007F\u0002\u0002\u00f8",
    "\u00f9\u0005\u0014\u000b\u0002\u00f9\u00fa\u0007J\u0002\u0002\u00fa",
    "\u00fc\u0003\u0002\u0002\u0002\u00fb\u00f8\u0003\u0002\u0002\u0002\u00fc",
    "\u00ff\u0003\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fd",
    "\u00fe\u0003\u0002\u0002\u0002\u00fe\u0101\u0003\u0002\u0002\u0002\u00ff",
    "\u00fd\u0003\u0002\u0002\u0002\u0100\u0102\u0005\u0014\u000b\u0002\u0101",
    "\u0100\u0003\u0002\u0002\u0002\u0101\u0102\u0003\u0002\u0002\u0002\u0102",
    "\u0103\u0003\u0002\u0002\u0002\u0103\u0104\u0007G\u0002\u0002\u0104",
    "\u0013\u0003\u0002\u0002\u0002\u0105\u0107\u0005X-\u0002\u0106\u0108",
    "\u0007O\u0002\u0002\u0107\u0106\u0003\u0002\u0002\u0002\u0107\u0108",
    "\u0003\u0002\u0002\u0002\u0108\u0109\u0003\u0002\u0002\u0002\u0109\u010a",
    "\u0007K\u0002\u0002\u010a\u010b\u0005\f\u0007\u0002\u010b\u0015\u0003",
    "\u0002\u0002\u0002\u010c\u0111\u0005\u0018\r\u0002\u010d\u010e\u0007",
    "K\u0002\u0002\u010e\u0112\u0005\f\u0007\u0002\u010f\u0110\u0007L\u0002",
    "\u0002\u0110\u0112\u0005\f\u0007\u0002\u0111\u010d\u0003\u0002\u0002",
    "\u0002\u0111\u010f\u0003\u0002\u0002\u0002\u0111\u0112\u0003\u0002\u0002",
    "\u0002\u0112\u0017\u0003\u0002\u0002\u0002\u0113\u0114\b\r\u0001\u0002",
    "\u0114\u0118\u0005\u001a\u000e\u0002\u0115\u0116\t\u0003\u0002\u0002",
    "\u0116\u0118\u0005\u0018\r\f\u0117\u0113\u0003\u0002\u0002\u0002\u0117",
    "\u0115\u0003\u0002\u0002\u0002\u0118\u0136\u0003\u0002\u0002\u0002\u0119",
    "\u011a\f\u000b\u0002\u0002\u011a\u011b\u0007@\u0002\u0002\u011b\u0135",
    "\u0005\u0018\r\f\u011c\u011d\f\n\u0002\u0002\u011d\u011e\t\u0004\u0002",
    "\u0002\u011e\u0135\u0005\u0018\r\u000b\u011f\u0120\f\t\u0002\u0002\u0120",
    "\u0121\t\u0005\u0002\u0002\u0121\u0135\u0005\u0018\r\n\u0122\u0123\f",
    "\b\u0002\u0002\u0123\u0124\u00077\u0002\u0002\u0124\u0135\u0005\u0018",
    "\r\t\u0125\u0126\f\u0007\u0002\u0002\u0126\u0127\t\u0006\u0002\u0002",
    "\u0127\u0135\u0005\u0018\r\b\u0128\u0129\f\u0006\u0002\u0002\u0129\u012a",
    "\u00075\u0002\u0002\u012a\u0135\u0005\u0018\r\u0006\u012b\u012c\f\u0005",
    "\u0002\u0002\u012c\u012d\u00076\u0002\u0002\u012d\u0135\u0005\u0018",
    "\r\u0005\u012e\u012f\f\u0004\u0002\u0002\u012f\u0130\u0007?\u0002\u0002",
    "\u0130\u0135\u0005\u0018\r\u0005\u0131\u0132\f\u0003\u0002\u0002\u0132",
    "\u0133\u0007>\u0002\u0002\u0133\u0135\u0005\u0018\r\u0004\u0134\u0119",
    "\u0003\u0002\u0002\u0002\u0134\u011c\u0003\u0002\u0002\u0002\u0134\u011f",
    "\u0003\u0002\u0002\u0002\u0134\u0122\u0003\u0002\u0002\u0002\u0134\u0125",
    "\u0003\u0002\u0002\u0002\u0134\u0128\u0003\u0002\u0002\u0002\u0134\u012b",
    "\u0003\u0002\u0002\u0002\u0134\u012e\u0003\u0002\u0002\u0002\u0134\u0131",
    "\u0003\u0002\u0002\u0002\u0135\u0138\u0003\u0002\u0002\u0002\u0136\u0134",
    "\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u0019",
    "\u0003\u0002\u0002\u0002\u0138\u0136\u0003\u0002\u0002\u0002\u0139\u0146",
    "\u00052\u001a\u0002\u013a\u0146\u0005\u001c\u000f\u0002\u013b\u0146",
    "\u0005\u001e\u0010\u0002\u013c\u0146\u0005 \u0011\u0002\u013d\u0146",
    "\u0005\"\u0012\u0002\u013e\u0146\u0005$\u0013\u0002\u013f\u0146\u0005",
    "&\u0014\u0002\u0140\u0146\u0005(\u0015\u0002\u0141\u0146\u0005*\u0016",
    "\u0002\u0142\u0146\u0005,\u0017\u0002\u0143\u0146\u0005.\u0018\u0002",
    "\u0144\u0146\u00050\u0019\u0002\u0145\u0139\u0003\u0002\u0002\u0002",
    "\u0145\u013a\u0003\u0002\u0002\u0002\u0145\u013b\u0003\u0002\u0002\u0002",
    "\u0145\u013c\u0003\u0002\u0002\u0002\u0145\u013d\u0003\u0002\u0002\u0002",
    "\u0145\u013e\u0003\u0002\u0002\u0002\u0145\u013f\u0003\u0002\u0002\u0002",
    "\u0145\u0140\u0003\u0002\u0002\u0002\u0145\u0141\u0003\u0002\u0002\u0002",
    "\u0145\u0142\u0003\u0002\u0002\u0002\u0145\u0143\u0003\u0002\u0002\u0002",
    "\u0145\u0144\u0003\u0002\u0002\u0002\u0146\u001b\u0003\u0002\u0002\u0002",
    "\u0147\u0149\u0007L\u0002\u0002\u0148\u014a\u0005F$\u0002\u0149\u0148",
    "\u0003\u0002\u0002\u0002\u014a\u014b\u0003\u0002\u0002\u0002\u014b\u0149",
    "\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u014d",
    "\u0003\u0002\u0002\u0002\u014d\u014e\u0007,\u0002\u0002\u014e\u014f",
    "\u0005\u0016\f\u0002\u014f\u001d\u0003\u0002\u0002\u0002\u0150\u0152",
    "\u0007M\u0002\u0002\u0151\u0153\u0005D#\u0002\u0152\u0151\u0003\u0002",
    "\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002\u0154\u0152\u0003\u0002",
    "\u0002\u0002\u0154\u0155\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002",
    "\u0002\u0002\u0156\u0157\u0007N\u0002\u0002\u0157\u0158\u0005\u0016",
    "\f\u0002\u0158\u001f\u0003\u0002\u0002\u0002\u0159\u015a\u0007\u0011",
    "\u0002\u0002\u015a\u015e\u0005T+\u0002\u015b\u015d\u0005D#\u0002\u015c",
    "\u015b\u0003\u0002\u0002\u0002\u015d\u0160\u0003\u0002\u0002\u0002\u015e",
    "\u015c\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f",
    "\u0164\u0003\u0002\u0002\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0161",
    "\u0163\u0005F$\u0002\u0162\u0161\u0003\u0002\u0002\u0002\u0163\u0166",
    "\u0003\u0002\u0002\u0002\u0164\u0162\u0003\u0002\u0002\u0002\u0164\u0165",
    "\u0003\u0002\u0002\u0002\u0165\u0167\u0003\u0002\u0002\u0002\u0166\u0164",
    "\u0003\u0002\u0002\u0002\u0167\u0168\u0007B\u0002\u0002\u0168\u0169",
    "\u0005\u0016\f\u0002\u0169\u016a\u0007\u0013\u0002\u0002\u016a\u016b",
    "\u0005\u0016\f\u0002\u016b!\u0003\u0002\u0002\u0002\u016c\u016d\u0007",
    "\u0012\u0002\u0002\u016d\u0171\u0005T+\u0002\u016e\u0170\u0005D#\u0002",
    "\u016f\u016e\u0003\u0002\u0002\u0002\u0170\u0173\u0003\u0002\u0002\u0002",
    "\u0171\u016f\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002",
    "\u0172\u0177\u0003\u0002\u0002\u0002\u0173\u0171\u0003\u0002\u0002\u0002",
    "\u0174\u0176\u0005F$\u0002\u0175\u0174\u0003\u0002\u0002\u0002\u0176",
    "\u0179\u0003\u0002\u0002\u0002\u0177\u0175\u0003\u0002\u0002\u0002\u0177",
    "\u0178\u0003\u0002\u0002\u0002\u0178\u017a\u0003\u0002\u0002\u0002\u0179",
    "\u0177\u0003\u0002\u0002\u0002\u017a\u017b\u0007K\u0002\u0002\u017b",
    "\u017c\u0005\f\u0007\u0002\u017c\u017d\u0007B\u0002\u0002\u017d\u017e",
    "\u0005\u0016\f\u0002\u017e\u017f\u0007\u0013\u0002\u0002\u017f\u0180",
    "\u0005\u0016\f\u0002\u0180#\u0003\u0002\u0002\u0002\u0181\u0182\u0007",
    "\u0006\u0002\u0002\u0182\u0183\u0005\u0016\f\u0002\u0183\u0184\u0007",
    "\u0013\u0002\u0002\u0184\u0185\u0005\u0016\f\u0002\u0185%\u0003\u0002",
    "\u0002\u0002\u0186\u0187\u0007\u0014\u0002\u0002\u0187\u0188\u0005\u0016",
    "\f\u0002\u0188\u0189\u0007\u0015\u0002\u0002\u0189\u018a\u0005\u0016",
    "\f\u0002\u018a\u018b\u0007\u0016\u0002\u0002\u018b\u018c\u0005\u0016",
    "\f\u0002\u018c\'\u0003\u0002\u0002\u0002\u018d\u018f\u0007\u0017\u0002",
    "\u0002\u018e\u0190\u0005L\'\u0002\u018f\u018e\u0003\u0002\u0002\u0002",
    "\u018f\u0190\u0003\u0002\u0002\u0002\u0190\u0193\u0003\u0002\u0002\u0002",
    "\u0191\u0192\u0007\u0018\u0002\u0002\u0192\u0194\u0005\f\u0007\u0002",
    "\u0193\u0191\u0003\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002",
    "\u0194\u0197\u0003\u0002\u0002\u0002\u0195\u0196\u0007\u0019\u0002\u0002",
    "\u0196\u0198\u0005\u0018\r\u0002\u0197\u0195\u0003\u0002\u0002\u0002",
    "\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002\u0002\u0002",
    "\u0199\u019a\u0007-\u0002\u0002\u019a\u01aa\u0005\u0018\r\u0002\u019b",
    "\u019d\u0007\u0017\u0002\u0002\u019c\u019e\u0005L\'\u0002\u019d\u019c",
    "\u0003\u0002\u0002\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019e\u01a1",
    "\u0003\u0002\u0002\u0002\u019f\u01a0\u0007\u0019\u0002\u0002\u01a0\u01a2",
    "\u0005\u0018\r\u0002\u01a1\u019f\u0003\u0002\u0002\u0002\u01a1\u01a2",
    "\u0003\u0002\u0002\u0002\u01a2\u01a5\u0003\u0002\u0002\u0002\u01a3\u01a4",
    "\u0007\u0018\u0002\u0002\u01a4\u01a6\u0005\f\u0007\u0002\u01a5\u01a3",
    "\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7",
    "\u0003\u0002\u0002\u0002\u01a7\u01a8\u0007-\u0002\u0002\u01a8\u01aa",
    "\u0005\u0018\r\u0002\u01a9\u018d\u0003\u0002\u0002\u0002\u01a9\u019b",
    "\u0003\u0002\u0002\u0002\u01aa)\u0003\u0002\u0002\u0002\u01ab\u01ac",
    "\u0007\u001a\u0002\u0002\u01ac\u01ad\u0005\u0018\r\u0002\u01ad+\u0003",
    "\u0002\u0002\u0002\u01ae\u01af\u0007\u001b\u0002\u0002\u01af\u01b0\u0005",
    "4\u001b\u0002\u01b0-\u0003\u0002\u0002\u0002\u01b1\u01b2\u0007\u001c",
    "\u0002\u0002\u01b2\u01b3\u0007\u001e\u0002\u0002\u01b3\u01b4\u0005\u0010",
    "\t\u0002\u01b4\u01b5\u00054\u001b\u0002\u01b5/\u0003\u0002\u0002\u0002",
    "\u01b6\u01b7\u0007\u001d\u0002\u0002\u01b7\u01b8\u0007\u001e\u0002\u0002",
    "\u01b8\u01b9\u0005\u0010\t\u0002\u01b9\u01ba\u00054\u001b\u0002\u01ba",
    "1\u0003\u0002\u0002\u0002\u01bb\u01be\u0005P)\u0002\u01bc\u01be\u0005",
    "4\u001b\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01bc\u0003",
    "\u0002\u0002\u0002\u01be\u01c4\u0003\u0002\u0002\u0002\u01bf\u01c3\u0005",
    "4\u001b\u0002\u01c0\u01c1\u0007\u001e\u0002\u0002\u01c1\u01c3\u0005",
    "\u0010\t\u0002\u01c2\u01bf\u0003\u0002\u0002\u0002\u01c2\u01c0\u0003",
    "\u0002\u0002\u0002\u01c3\u01c6\u0003\u0002\u0002\u0002\u01c4\u01c2\u0003",
    "\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c53\u0003",
    "\u0002\u0002\u0002\u01c6\u01c4\u0003\u0002\u0002\u0002\u01c7\u01cc\u0005",
    "6\u001c\u0002\u01c8\u01c9\u0007N\u0002\u0002\u01c9\u01cb\u0005Z.\u0002",
    "\u01ca\u01c8\u0003\u0002\u0002\u0002\u01cb\u01ce\u0003\u0002\u0002\u0002",
    "\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002\u0002",
    "\u01cd5\u0003\u0002\u0002\u0002\u01ce\u01cc\u0003\u0002\u0002\u0002",
    "\u01cf\u01e1\u0005V,\u0002\u01d0\u01e1\u0007(\u0002\u0002\u01d1\u01e1",
    "\u0005\\/\u0002\u01d2\u01e1\u0007*\u0002\u0002\u01d3\u01e1\u0007+\u0002",
    "\u0002\u01d4\u01e1\u0007\u001f\u0002\u0002\u01d5\u01e1\u0007 \u0002",
    "\u0002\u01d6\u01e1\u0007!\u0002\u0002\u01d7\u01e1\u00058\u001d\u0002",
    "\u01d8\u01e1\u0005:\u001e\u0002\u01d9\u01e1\u0005> \u0002\u01da\u01db",
    "\u0007P\u0002\u0002\u01db\u01e1\u0005P)\u0002\u01dc\u01dd\u0007H\u0002",
    "\u0002\u01dd\u01de\u0005\u0016\f\u0002\u01de\u01df\u0007I\u0002\u0002",
    "\u01df\u01e1\u0003\u0002\u0002\u0002\u01e0\u01cf\u0003\u0002\u0002\u0002",
    "\u01e0\u01d0\u0003\u0002\u0002\u0002\u01e0\u01d1\u0003\u0002\u0002\u0002",
    "\u01e0\u01d2\u0003\u0002\u0002\u0002\u01e0\u01d3\u0003\u0002\u0002\u0002",
    "\u01e0\u01d4\u0003\u0002\u0002\u0002\u01e0\u01d5\u0003\u0002\u0002\u0002",
    "\u01e0\u01d6\u0003\u0002\u0002\u0002\u01e0\u01d7\u0003\u0002\u0002\u0002",
    "\u01e0\u01d8\u0003\u0002\u0002\u0002\u01e0\u01d9\u0003\u0002\u0002\u0002",
    "\u01e0\u01da\u0003\u0002\u0002\u0002\u01e0\u01dc\u0003\u0002\u0002\u0002",
    "\u01e17\u0003\u0002\u0002\u0002\u01e2\u01e8\u0007D\u0002\u0002\u01e3",
    "\u01e4\u0005\u0016\f\u0002\u01e4\u01e5\u0007J\u0002\u0002\u01e5\u01e7",
    "\u0003\u0002\u0002\u0002\u01e6\u01e3\u0003\u0002\u0002\u0002\u01e7\u01ea",
    "\u0003\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e8\u01e9",
    "\u0003\u0002\u0002\u0002\u01e9\u01ec\u0003\u0002\u0002\u0002\u01ea\u01e8",
    "\u0003\u0002\u0002\u0002\u01eb\u01ed\u0005\u0016\f\u0002\u01ec\u01eb",
    "\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ee",
    "\u0003\u0002\u0002\u0002\u01ee\u01ef\u0007E\u0002\u0002\u01ef9\u0003",
    "\u0002\u0002\u0002\u01f0\u01fa\u0007F\u0002\u0002\u01f1\u01f5\u0005",
    "<\u001f\u0002\u01f2\u01f5\u0005@!\u0002\u01f3\u01f5\u0005B\"\u0002\u01f4",
    "\u01f1\u0003\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f4",
    "\u01f3\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6",
    "\u01f7\u0007J\u0002\u0002\u01f7\u01f9\u0003\u0002\u0002\u0002\u01f8",
    "\u01f4\u0003\u0002\u0002\u0002\u01f9\u01fc\u0003\u0002\u0002\u0002\u01fa",
    "\u01f8\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb",
    "\u0202\u0003\u0002\u0002\u0002\u01fc\u01fa\u0003\u0002\u0002\u0002\u01fd",
    "\u0201\u0005<\u001f\u0002\u01fe\u0201\u0005@!\u0002\u01ff\u0201\u0005",
    "B\"\u0002\u0200\u01fd\u0003\u0002\u0002\u0002\u0200\u01fe\u0003\u0002",
    "\u0002\u0002\u0200\u01ff\u0003\u0002\u0002\u0002\u0201\u0203\u0003\u0002",
    "\u0002\u0002\u0202\u0200\u0003\u0002\u0002\u0002\u0202\u0203\u0003\u0002",
    "\u0002\u0002\u0203\u0204\u0003\u0002\u0002\u0002\u0204\u0205\u0007G",
    "\u0002\u0002\u0205;\u0003\u0002\u0002\u0002\u0206\u0208\u0007\"\u0002",
    "\u0002\u0207\u0206\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002",
    "\u0002\u0208\u020a\u0003\u0002\u0002\u0002\u0209\u020b\u0005L\'\u0002",
    "\u020a\u0209\u0003\u0002\u0002\u0002\u020a\u020b\u0003\u0002\u0002\u0002",
    "\u020b\u020c\u0003\u0002\u0002\u0002\u020c\u0210\u0005X-\u0002\u020d",
    "\u020f\u0005F$\u0002\u020e\u020d\u0003\u0002\u0002\u0002\u020f\u0212",
    "\u0003\u0002\u0002\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0210\u0211",
    "\u0003\u0002\u0002\u0002\u0211\u0213\u0003\u0002\u0002\u0002\u0212\u0210",
    "\u0003\u0002\u0002\u0002\u0213\u0214\u0007B\u0002\u0002\u0214\u0215",
    "\u0005\u0016\f\u0002\u0215=\u0003\u0002\u0002\u0002\u0216\u0217\u0007",
    "F\u0002\u0002\u0217\u0218\u0005\u0016\f\u0002\u0218\u0221\u0007#\u0002",
    "\u0002\u0219\u021a\u0005X-\u0002\u021a\u021b\u0007B\u0002\u0002\u021b",
    "\u021c\u0005\u0016\f\u0002\u021c\u021d\u0003\u0002\u0002\u0002\u021d",
    "\u021e\u0007J\u0002\u0002\u021e\u0220\u0003\u0002\u0002\u0002\u021f",
    "\u0219\u0003\u0002\u0002\u0002\u0220\u0223\u0003\u0002\u0002\u0002\u0221",
    "\u021f\u0003\u0002\u0002\u0002\u0221\u0222\u0003\u0002\u0002\u0002\u0222",
    "\u0228\u0003\u0002\u0002\u0002\u0223\u0221\u0003\u0002\u0002\u0002\u0224",
    "\u0225\u0005X-\u0002\u0225\u0226\u0007B\u0002\u0002\u0226\u0227\u0005",
    "\u0016\f\u0002\u0227\u0229\u0003\u0002\u0002\u0002\u0228\u0224\u0003",
    "\u0002\u0002\u0002\u0228\u0229\u0003\u0002\u0002\u0002\u0229\u022a\u0003",
    "\u0002\u0002\u0002\u022a\u022b\u0007G\u0002\u0002\u022b?\u0003\u0002",
    "\u0002\u0002\u022c\u022e\u0007\"\u0002\u0002\u022d\u022c\u0003\u0002",
    "\u0002\u0002\u022d\u022e\u0003\u0002\u0002\u0002\u022e\u0232\u0003\u0002",
    "\u0002\u0002\u022f\u0230\u0005L\'\u0002\u0230\u0231\u0007\u001e\u0002",
    "\u0002\u0231\u0233\u0003\u0002\u0002\u0002\u0232\u022f\u0003\u0002\u0002",
    "\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233\u0234\u0003\u0002\u0002",
    "\u0002\u0234\u0235\u0007H\u0002\u0002\u0235\u0239\u0005X-\u0002\u0236",
    "\u0238\u0005F$\u0002\u0237\u0236\u0003\u0002\u0002\u0002\u0238\u023b",
    "\u0003\u0002\u0002\u0002\u0239\u0237\u0003\u0002\u0002\u0002\u0239\u023a",
    "\u0003\u0002\u0002\u0002\u023a\u023c\u0003\u0002\u0002\u0002\u023b\u0239",
    "\u0003\u0002\u0002\u0002\u023c\u023d\u0007I\u0002\u0002\u023d\u023e",
    "\u0007N\u0002\u0002\u023e\u0242\u0005X-\u0002\u023f\u0241\u0005F$\u0002",
    "\u0240\u023f\u0003\u0002\u0002\u0002\u0241\u0244\u0003\u0002\u0002\u0002",
    "\u0242\u0240\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002",
    "\u0243\u0245\u0003\u0002\u0002\u0002\u0244\u0242\u0003\u0002\u0002\u0002",
    "\u0245\u0246\u0007B\u0002\u0002\u0246\u0247\u0005\u0016\f\u0002\u0247",
    "A\u0003\u0002\u0002\u0002\u0248\u024a\u0007\"\u0002\u0002\u0249\u0248",
    "\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002\u024a\u024d",
    "\u0003\u0002\u0002\u0002\u024b\u024e\u0007%\u0002\u0002\u024c\u024e",
    "\u0005L\'\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024c\u0003",
    "\u0002\u0002\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0250\u0007",
    "N\u0002\u0002\u0250\u0254\u0005X-\u0002\u0251\u0253\u0005F$\u0002\u0252",
    "\u0251\u0003\u0002\u0002\u0002\u0253\u0256\u0003\u0002\u0002\u0002\u0254",
    "\u0252\u0003\u0002\u0002\u0002\u0254\u0255\u0003\u0002\u0002\u0002\u0255",
    "\u0257\u0003\u0002\u0002\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0257",
    "\u0258\u0007B\u0002\u0002\u0258\u0259\u0005\u0016\f\u0002\u0259C\u0003",
    "\u0002\u0002\u0002\u025a\u0262\u0005P)\u0002\u025b\u025c\u0007H\u0002",
    "\u0002\u025c\u025d\u0005P)\u0002\u025d\u025e\u00071\u0002\u0002\u025e",
    "\u025f\u0005\f\u0007\u0002\u025f\u0260\u0007I\u0002\u0002\u0260\u0262",
    "\u0003\u0002\u0002\u0002\u0261\u025a\u0003\u0002\u0002\u0002\u0261\u025b",
    "\u0003\u0002\u0002\u0002\u0262E\u0003\u0002\u0002\u0002\u0263\u026c",
    "\u0005H%\u0002\u0264\u0265\u0007H\u0002\u0002\u0265\u0266\u0005H%\u0002",
    "\u0266\u0267\u0007K\u0002\u0002\u0267\u0268\u0005\f\u0007\u0002\u0268",
    "\u0269\u0007I\u0002\u0002\u0269\u026c\u0003\u0002\u0002\u0002\u026a",
    "\u026c\u0005J&\u0002\u026b\u0263\u0003\u0002\u0002\u0002\u026b\u0264",
    "\u0003\u0002\u0002\u0002\u026b\u026a\u0003\u0002\u0002\u0002\u026cG",
    "\u0003\u0002\u0002\u0002\u026d\u0270\u0007%\u0002\u0002\u026e\u0270",
    "\u0005T+\u0002\u026f\u026d\u0003\u0002\u0002\u0002\u026f\u026e\u0003",
    "\u0002\u0002\u0002\u0270I\u0003\u0002\u0002\u0002\u0271\u027a\u0007",
    "F\u0002\u0002\u0272\u0273\u0005X-\u0002\u0273\u0274\u0007B\u0002\u0002",
    "\u0274\u0275\u0005\u0016\f\u0002\u0275\u0276\u0003\u0002\u0002\u0002",
    "\u0276\u0277\u0007J\u0002\u0002\u0277\u0279\u0003\u0002\u0002\u0002",
    "\u0278\u0272\u0003\u0002\u0002\u0002\u0279\u027c\u0003\u0002\u0002\u0002",
    "\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002\u0002",
    "\u027b\u0281\u0003\u0002\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002",
    "\u027d\u027e\u0005X-\u0002\u027e\u027f\u0007B\u0002\u0002\u027f\u0280",
    "\u0005\u0016\f\u0002\u0280\u0282\u0003\u0002\u0002\u0002\u0281\u027d",
    "\u0003\u0002\u0002\u0002\u0281\u0282\u0003\u0002\u0002\u0002\u0282\u0283",
    "\u0003\u0002\u0002\u0002\u0283\u0284\u0007$\u0002\u0002\u0284\u0285",
    "\u0007G\u0002\u0002\u0285K\u0003\u0002\u0002\u0002\u0286\u0287\u0007",
    "D\u0002\u0002\u0287\u028a\u0005T+\u0002\u0288\u0289\u0007K\u0002\u0002",
    "\u0289\u028b\u0005\f\u0007\u0002\u028a\u0288\u0003\u0002\u0002\u0002",
    "\u028a\u028b\u0003\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002",
    "\u028c\u028d\u0007E\u0002\u0002\u028dM\u0003\u0002\u0002\u0002\u028e",
    "\u0291\u0005\f\u0007\u0002\u028f\u0290\u0007-\u0002\u0002\u0290\u0292",
    "\u0005\f\u0007\u0002\u0291\u028f\u0003\u0002\u0002\u0002\u0291\u0292",
    "\u0003\u0002\u0002\u0002\u0292O\u0003\u0002\u0002\u0002\u0293\u0294",
    "\u0007\'\u0002\u0002\u0294Q\u0003\u0002\u0002\u0002\u0295\u0296\u0007",
    "\'\u0002\u0002\u0296S\u0003\u0002\u0002\u0002\u0297\u0298\u0007&\u0002",
    "\u0002\u0298U\u0003\u0002\u0002\u0002\u0299\u029a\t\u0002\u0002\u0002",
    "\u029aW\u0003\u0002\u0002\u0002\u029b\u029c\t\u0002\u0002\u0002\u029c",
    "Y\u0003\u0002\u0002\u0002\u029d\u029e\t\u0002\u0002\u0002\u029e[\u0003",
    "\u0002\u0002\u0002\u029f\u02a3\u0007)\u0002\u0002\u02a0\u02a2\u0005",
    "^0\u0002\u02a1\u02a0\u0003\u0002\u0002\u0002\u02a2\u02a5\u0003\u0002",
    "\u0002\u0002\u02a3\u02a1\u0003\u0002\u0002\u0002\u02a3\u02a4\u0003\u0002",
    "\u0002\u0002\u02a4\u02a6\u0003\u0002\u0002\u0002\u02a5\u02a3\u0003\u0002",
    "\u0002\u0002\u02a6\u02a7\t\u0007\u0002\u0002\u02a7]\u0003\u0002\u0002",
    "\u0002\u02a8\u02ad\u0005`1\u0002\u02a9\u02ad\u0005b2\u0002\u02aa\u02ad",
    "\u0005d3\u0002\u02ab\u02ad\u0005f4\u0002\u02ac\u02a8\u0003\u0002\u0002",
    "\u0002\u02ac\u02a9\u0003\u0002\u0002\u0002\u02ac\u02aa\u0003\u0002\u0002",
    "\u0002\u02ac\u02ab\u0003\u0002\u0002\u0002\u02ad_\u0003\u0002\u0002",
    "\u0002\u02ae\u02b2\t\b\u0002\u0002\u02af\u02b1\u0005h5\u0002\u02b0\u02af",
    "\u0003\u0002\u0002\u0002\u02b1\u02b4\u0003\u0002\u0002\u0002\u02b2\u02b0",
    "\u0003\u0002\u0002\u0002\u02b2\u02b3\u0003\u0002\u0002\u0002\u02b3a",
    "\u0003\u0002\u0002\u0002\u02b4\u02b2\u0003\u0002\u0002\u0002\u02b5\u02b6",
    "\t\t\u0002\u0002\u02b6\u02b7\u0005\u0016\f\u0002\u02b7\u02b8\u0007I",
    "\u0002\u0002\u02b8c\u0003\u0002\u0002\u0002\u02b9\u02ba\t\n\u0002\u0002",
    "\u02bae\u0003\u0002\u0002\u0002\u02bb\u02bc\t\u000b\u0002\u0002\u02bc",
    "g\u0003\u0002\u0002\u0002\u02bd\u02be\u0007W\u0002\u0002\u02be\u02bf",
    "\u0005\u0016\f\u0002\u02bf\u02c0\u0007I\u0002\u0002\u02c0\u02d7\u0003",
    "\u0002\u0002\u0002\u02c1\u02c7\u0007X\u0002\u0002\u02c2\u02c3\u0005",
    "j6\u0002\u02c3\u02c4\u0007J\u0002\u0002\u02c4\u02c6\u0003\u0002\u0002",
    "\u0002\u02c5\u02c2\u0003\u0002\u0002\u0002\u02c6\u02c9\u0003\u0002\u0002",
    "\u0002\u02c7\u02c5\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002",
    "\u0002\u02c8\u02cb\u0003\u0002\u0002\u0002\u02c9\u02c7\u0003\u0002\u0002",
    "\u0002\u02ca\u02cc\u0005j6\u0002\u02cb\u02ca\u0003\u0002\u0002\u0002",
    "\u02cb\u02cc\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002",
    "\u02cd\u02d7\u0007G\u0002\u0002\u02ce\u02d2\u0007Y\u0002\u0002\u02cf",
    "\u02d1\u0005^0\u0002\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d1\u02d4",
    "\u0003\u0002\u0002\u0002\u02d2\u02d0\u0003\u0002\u0002\u0002\u02d2\u02d3",
    "\u0003\u0002\u0002\u0002\u02d3\u02d5\u0003\u0002\u0002\u0002\u02d4\u02d2",
    "\u0003\u0002\u0002\u0002\u02d5\u02d7\t\f\u0002\u0002\u02d6\u02bd\u0003",
    "\u0002\u0002\u0002\u02d6\u02c1\u0003\u0002\u0002\u0002\u02d6\u02ce\u0003",
    "\u0002\u0002\u0002\u02d7i\u0003\u0002\u0002\u0002\u02d8\u02dc\u0005",
    "X-\u0002\u02d9\u02db\u0005F$\u0002\u02da\u02d9\u0003\u0002\u0002\u0002",
    "\u02db\u02de\u0003\u0002\u0002\u0002\u02dc\u02da\u0003\u0002\u0002\u0002",
    "\u02dc\u02dd\u0003\u0002\u0002\u0002\u02dd\u02df\u0003\u0002\u0002\u0002",
    "\u02de\u02dc\u0003\u0002\u0002\u0002\u02df\u02e0\u0007B\u0002\u0002",
    "\u02e0\u02e1\u0005\u0016\f\u0002\u02e1k\u0003\u0002\u0002\u0002Nou\u007f",
    "\u0087\u0091\u0097\u00a2\u00a8\u00ad\u00bc\u00be\u00c7\u00c9\u00d0\u00da",
    "\u00e3\u00f5\u00fd\u0101\u0107\u0111\u0117\u0134\u0136\u0145\u014b\u0154",
    "\u015e\u0164\u0171\u0177\u018f\u0193\u0197\u019d\u01a1\u01a5\u01a9\u01bd",
    "\u01c2\u01c4\u01cc\u01e0\u01e8\u01ec\u01f4\u01fa\u0200\u0202\u0207\u020a",
    "\u0210\u0221\u0228\u022d\u0232\u0239\u0242\u0249\u024d\u0254\u0261\u026b",
    "\u026f\u027a\u0281\u028a\u0291\u02a3\u02ac\u02b2\u02c7\u02cb\u02d2\u02d6",
    "\u02dc"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class CPnextParser extends antlr4.Parser {

    static grammarFileName = "CPnextParser.g4";
    static literalNames = [ null, null, null, null, "'open'", "'type'", 
                            "'forall'", "'Trait'", "'mu'", "'Int'", "'Double'", 
                            "'String'", "'Bool'", "'Top'", "'Bot'", "'let'", 
                            "'letrec'", "'in'", "'if'", "'then'", "'else'", 
                            "'trait'", "'implements'", "'inherits'", "'new'", 
                            "'toString'", "'fold'", "'unfold'", "'@'", "'true'", 
                            "'false'", "'undefined'", "'override'", "'|'", 
                            "'..'", "'_'", null, null, null, null, null, 
                            "'()'", "'->'", "'=>'", "'&'", "'+'", "'-'", 
                            "'*'", "'/'", "'%'", "'!'", "'&&'", "'||'", 
                            "'++'", "'<'", "'>'", null, null, "'=='", "'!='", 
                            "','", "'^'", "'!!'", "'#'", "'='", null, null, 
                            null, null, "'}'", null, "')'", "';'", "':'", 
                            "'\\'", "'/\\'", "'.'", "'?'", "'$'" ];
    static symbolicNames = [ null, "Whitespaces", "LineComment", "BlockComment", 
                             "Open", "Type", "ForAll", "TraitCaps", "Mu", 
                             "Int", "Double", "StringType", "Bool", "Top", 
                             "Bot", "Let", "LetRec", "In", "If", "Then", 
                             "Else", "TraitSmall", "Implements", "Inherits", 
                             "New", "ToString", "Fold", "Unfold", "At", 
                             "True_", "False_", "Undefined_", "Override", 
                             "Stick", "DotDot", "Underscore", "Lowerid", 
                             "Upperid", "Number", "BacktickOpen", "String", 
                             "Unit", "Arrow", "TraitArrow", "Intersect", 
                             "Plus", "Minus", "Star", "Divide", "Modulo", 
                             "Not", "And", "Or", "Append", "Less", "Greater", 
                             "LessEqual", "GreaterEqual", "Equal", "NotEqual", 
                             "Merge", "Forward", "Index", "Length", "Assign", 
                             "Newline", "BracketOpen", "BracketClose", "BraceOpen", 
                             "BraceClose", "ParenOpen", "ParenClose", "Semicolon", 
                             "Colon", "Backslash", "SlashBackslash", "Dot", 
                             "Question", "Dollar", "BacktickClose", "BracketCloseInDoc", 
                             "LineBreak", "Tag", "BackslashParen", "Plaintext", 
                             "ParenOpenInTag", "BraceOpenInTag", "BracketOpenInTag", 
                             "PlaintextAfterTag", "BracketCloseAfterTag", 
                             "BacktickCloseAfterTag", "TagAfterTag", "LinebreakAfterTag", 
                             "BackslashParenAfterTag" ];
    static ruleNames = [ "program", "open", "definition", "typeDef", "termDef", 
                         "type", "btype", "atype", "recordType", "recordTypeElement", 
                         "expression", "opexpr", "lexpr", "lambda", "bigLambda", 
                         "let_", "letRec", "open_", "ifElse", "trait", "new_", 
                         "toString_", "fold", "unfold", "fexpr", "dotexpr", 
                         "aexpr", "array", "record", "recordField", "recordUpdate", 
                         "methodPattern", "defaultPattern", "typeParam", 
                         "termParam", "termId", "wildcard", "selfAnno", 
                         "sort", "typeNameDecl", "typeName", "termNameDecl", 
                         "termName", "labelDecl", "label", "document", "docElement", 
                         "command", "interpolation", "newline", "plaintext", 
                         "arg", "recordArgField" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CPnextParser.ruleNames;
        this.literalNames = CPnextParser.literalNames;
        this.symbolicNames = CPnextParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 5:
    	    		return this.type_sempred(localctx, predIndex);
    	case 11:
    	    		return this.opexpr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    opexpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 9);
    		case 3:
    			return this.precpred(this._ctx, 8);
    		case 4:
    			return this.precpred(this._ctx, 7);
    		case 5:
    			return this.precpred(this._ctx, 6);
    		case 6:
    			return this.precpred(this._ctx, 5);
    		case 7:
    			return this.precpred(this._ctx, 4);
    		case 8:
    			return this.precpred(this._ctx, 3);
    		case 9:
    			return this.precpred(this._ctx, 2);
    		case 10:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CPnextParser.RULE_program);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 109;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 106;
	                this.open(); 
	            }
	            this.state = 111;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
	        }

	        this.state = 115;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 112;
	                this.definition(); 
	            }
	            this.state = 117;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	        }

	        this.state = 118;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	open() {
	    let localctx = new OpenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CPnextParser.RULE_open);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 120;
	        this.match(CPnextParser.Open);
	        this.state = 125;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 121;
	                _la = this._input.LA(1);
	                if(!(_la===CPnextParser.Lowerid || _la===CPnextParser.Upperid)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 122;
	                this.match(CPnextParser.Divide); 
	            }
	            this.state = 127;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	        }

	        this.state = 128;
	        _la = this._input.LA(1);
	        if(!(_la===CPnextParser.Lowerid || _la===CPnextParser.Upperid)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 129;
	        this.match(CPnextParser.Semicolon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	definition() {
	    let localctx = new DefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CPnextParser.RULE_definition);
	    try {
	        this.state = 133;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.Type:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 131;
	            this.typeDef();
	            break;
	        case CPnextParser.Lowerid:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 132;
	            this.termDef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDef() {
	    let localctx = new TypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CPnextParser.RULE_typeDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 135;
	        this.match(CPnextParser.Type);
	        this.state = 136;
	        this.typeNameDecl();
	        this.state = 143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Less) {
	            this.state = 137;
	            this.match(CPnextParser.Less);
	            this.state = 138;
	            this.typeNameDecl();
	            this.state = 139;
	            this.match(CPnextParser.Greater);
	            this.state = 145;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 149;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Upperid) {
	            this.state = 146;
	            this.typeNameDecl();
	            this.state = 151;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 152;
	        this.match(CPnextParser.Assign);
	        this.state = 153;
	        this.type(0);
	        this.state = 154;
	        this.match(CPnextParser.Semicolon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	termDef() {
	    let localctx = new TermDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CPnextParser.RULE_termDef);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 156;
	        this.termNameDecl();
	        this.state = 160;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 157;
	                this.typeParam(); 
	            }
	            this.state = 162;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	        this.state = 166;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Underscore || _la===CPnextParser.Lowerid || _la===CPnextParser.BraceOpen || _la===CPnextParser.ParenOpen) {
	            this.state = 163;
	            this.termParam();
	            this.state = 168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 171;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.Colon) {
	            this.state = 169;
	            this.match(CPnextParser.Colon);
	            this.state = 170;
	            this.type(0);
	        }

	        this.state = 173;
	        this.match(CPnextParser.Assign);
	        this.state = 174;
	        this.expression();
	        this.state = 175;
	        this.match(CPnextParser.Semicolon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 10;
	    this.enterRecursionRule(localctx, 10, CPnextParser.RULE_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 178;
	        this.btype();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 188;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 186;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new TypeContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_type);
	                    this.state = 180;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 181;
	                    this.match(CPnextParser.Intersect);
	                    this.state = 182;
	                    this.type(3);
	                    break;

	                case 2:
	                    localctx = new TypeContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_type);
	                    this.state = 183;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 184;
	                    this.match(CPnextParser.Arrow);
	                    this.state = 185;
	                    this.type(1);
	                    break;

	                } 
	            }
	            this.state = 190;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	btype() {
	    let localctx = new BtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CPnextParser.RULE_btype);
	    var _la = 0; // Token type
	    try {
	        this.state = 225;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.Int:
	        case CPnextParser.Double:
	        case CPnextParser.StringType:
	        case CPnextParser.Bool:
	        case CPnextParser.Top:
	        case CPnextParser.Bot:
	        case CPnextParser.Upperid:
	        case CPnextParser.BracketOpen:
	        case CPnextParser.BraceOpen:
	        case CPnextParser.ParenOpen:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 191;
	            this.atype();
	            this.state = 199;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 197;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case CPnextParser.Int:
	                    case CPnextParser.Double:
	                    case CPnextParser.StringType:
	                    case CPnextParser.Bool:
	                    case CPnextParser.Top:
	                    case CPnextParser.Bot:
	                    case CPnextParser.Upperid:
	                    case CPnextParser.BracketOpen:
	                    case CPnextParser.BraceOpen:
	                    case CPnextParser.ParenOpen:
	                        this.state = 192;
	                        this.atype();
	                        break;
	                    case CPnextParser.Less:
	                        this.state = 193;
	                        this.match(CPnextParser.Less);
	                        this.state = 194;
	                        this.sort();
	                        this.state = 195;
	                        this.match(CPnextParser.Greater);
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 201;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	            }

	            break;
	        case CPnextParser.ForAll:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 202;
	            this.match(CPnextParser.ForAll);
	            this.state = 204; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 203;
	                this.typeParam();
	                this.state = 206; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===CPnextParser.Upperid || _la===CPnextParser.ParenOpen);
	            this.state = 208;
	            this.match(CPnextParser.Dot);
	            this.state = 209;
	            this.type(0);
	            break;
	        case CPnextParser.TraitCaps:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 211;
	            this.match(CPnextParser.TraitCaps);
	            this.state = 212;
	            this.match(CPnextParser.Less);
	            this.state = 213;
	            this.type(0);
	            this.state = 216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CPnextParser.TraitArrow) {
	                this.state = 214;
	                this.match(CPnextParser.TraitArrow);
	                this.state = 215;
	                this.type(0);
	            }

	            this.state = 218;
	            this.match(CPnextParser.Greater);
	            break;
	        case CPnextParser.Mu:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 220;
	            this.match(CPnextParser.Mu);
	            this.state = 221;
	            this.typeNameDecl();
	            this.state = 222;
	            this.match(CPnextParser.Dot);
	            this.state = 223;
	            this.type(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atype() {
	    let localctx = new AtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CPnextParser.RULE_atype);
	    try {
	        this.state = 243;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.Int:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 227;
	            this.match(CPnextParser.Int);
	            break;
	        case CPnextParser.Double:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 228;
	            this.match(CPnextParser.Double);
	            break;
	        case CPnextParser.StringType:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 229;
	            this.match(CPnextParser.StringType);
	            break;
	        case CPnextParser.Bool:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 230;
	            this.match(CPnextParser.Bool);
	            break;
	        case CPnextParser.Top:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 231;
	            this.match(CPnextParser.Top);
	            break;
	        case CPnextParser.Bot:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 232;
	            this.match(CPnextParser.Bot);
	            break;
	        case CPnextParser.Upperid:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 233;
	            this.typeName();
	            break;
	        case CPnextParser.BraceOpen:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 234;
	            this.recordType();
	            break;
	        case CPnextParser.BracketOpen:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 235;
	            this.match(CPnextParser.BracketOpen);
	            this.state = 236;
	            this.type(0);
	            this.state = 237;
	            this.match(CPnextParser.BracketClose);
	            break;
	        case CPnextParser.ParenOpen:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 239;
	            this.match(CPnextParser.ParenOpen);
	            this.state = 240;
	            this.type(0);
	            this.state = 241;
	            this.match(CPnextParser.ParenClose);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordType() {
	    let localctx = new RecordTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CPnextParser.RULE_recordType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        this.match(CPnextParser.BraceOpen);
	        this.state = 251;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 246;
	                this.recordTypeElement();
	                this.state = 247;
	                this.match(CPnextParser.Semicolon); 
	            }
	            this.state = 253;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	        }

	        this.state = 255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.Lowerid || _la===CPnextParser.Upperid) {
	            this.state = 254;
	            this.recordTypeElement();
	        }

	        this.state = 257;
	        this.match(CPnextParser.BraceClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordTypeElement() {
	    let localctx = new RecordTypeElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CPnextParser.RULE_recordTypeElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.labelDecl();
	        this.state = 261;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.Question) {
	            this.state = 260;
	            this.match(CPnextParser.Question);
	        }

	        this.state = 263;
	        this.match(CPnextParser.Colon);
	        this.state = 264;
	        this.type(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CPnextParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 266;
	        this.opexpr(0);
	        this.state = 271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        if(la_===1) {
	            this.state = 267;
	            this.match(CPnextParser.Colon);
	            this.state = 268;
	            this.type(0);

	        } else if(la_===2) {
	            this.state = 269;
	            this.match(CPnextParser.Backslash);
	            this.state = 270;
	            this.type(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	opexpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new OpexprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 22;
	    this.enterRecursionRule(localctx, 22, CPnextParser.RULE_opexpr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 277;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.Open:
	        case CPnextParser.Let:
	        case CPnextParser.LetRec:
	        case CPnextParser.If:
	        case CPnextParser.TraitSmall:
	        case CPnextParser.New:
	        case CPnextParser.ToString:
	        case CPnextParser.Fold:
	        case CPnextParser.Unfold:
	        case CPnextParser.True_:
	        case CPnextParser.False_:
	        case CPnextParser.Undefined_:
	        case CPnextParser.Lowerid:
	        case CPnextParser.Upperid:
	        case CPnextParser.Number:
	        case CPnextParser.BacktickOpen:
	        case CPnextParser.String:
	        case CPnextParser.Unit:
	        case CPnextParser.BracketOpen:
	        case CPnextParser.BraceOpen:
	        case CPnextParser.ParenOpen:
	        case CPnextParser.Backslash:
	        case CPnextParser.SlashBackslash:
	        case CPnextParser.Dollar:
	            this.state = 274;
	            this.lexpr();
	            break;
	        case CPnextParser.Minus:
	        case CPnextParser.Not:
	        case CPnextParser.Length:
	            this.state = 275;
	            _la = this._input.LA(1);
	            if(!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (CPnextParser.Minus - 46)) | (1 << (CPnextParser.Not - 46)) | (1 << (CPnextParser.Length - 46)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 276;
	            this.opexpr(10);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 308;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 306;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new OpexprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_opexpr);
	                    this.state = 279;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 280;
	                    this.match(CPnextParser.Index);
	                    this.state = 281;
	                    this.opexpr(10);
	                    break;

	                case 2:
	                    localctx = new OpexprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_opexpr);
	                    this.state = 282;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 283;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CPnextParser.Star - 47)) | (1 << (CPnextParser.Divide - 47)) | (1 << (CPnextParser.Modulo - 47)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 284;
	                    this.opexpr(9);
	                    break;

	                case 3:
	                    localctx = new OpexprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_opexpr);
	                    this.state = 285;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 286;
	                    _la = this._input.LA(1);
	                    if(!(_la===CPnextParser.Plus || _la===CPnextParser.Minus)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 287;
	                    this.opexpr(8);
	                    break;

	                case 4:
	                    localctx = new OpexprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_opexpr);
	                    this.state = 288;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 289;
	                    this.match(CPnextParser.Append);
	                    this.state = 290;
	                    this.opexpr(7);
	                    break;

	                case 5:
	                    localctx = new OpexprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_opexpr);
	                    this.state = 291;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 292;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CPnextParser.Less - 54)) | (1 << (CPnextParser.Greater - 54)) | (1 << (CPnextParser.LessEqual - 54)) | (1 << (CPnextParser.GreaterEqual - 54)) | (1 << (CPnextParser.Equal - 54)) | (1 << (CPnextParser.NotEqual - 54)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 293;
	                    this.opexpr(6);
	                    break;

	                case 6:
	                    localctx = new OpexprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_opexpr);
	                    this.state = 294;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 295;
	                    this.match(CPnextParser.And);
	                    this.state = 296;
	                    this.opexpr(4);
	                    break;

	                case 7:
	                    localctx = new OpexprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_opexpr);
	                    this.state = 297;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 298;
	                    this.match(CPnextParser.Or);
	                    this.state = 299;
	                    this.opexpr(3);
	                    break;

	                case 8:
	                    localctx = new OpexprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_opexpr);
	                    this.state = 300;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 301;
	                    this.match(CPnextParser.Forward);
	                    this.state = 302;
	                    this.opexpr(3);
	                    break;

	                case 9:
	                    localctx = new OpexprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPnextParser.RULE_opexpr);
	                    this.state = 303;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 304;
	                    this.match(CPnextParser.Merge);
	                    this.state = 305;
	                    this.opexpr(2);
	                    break;

	                } 
	            }
	            this.state = 310;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	lexpr() {
	    let localctx = new LexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CPnextParser.RULE_lexpr);
	    try {
	        this.state = 323;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.True_:
	        case CPnextParser.False_:
	        case CPnextParser.Undefined_:
	        case CPnextParser.Lowerid:
	        case CPnextParser.Upperid:
	        case CPnextParser.Number:
	        case CPnextParser.BacktickOpen:
	        case CPnextParser.String:
	        case CPnextParser.Unit:
	        case CPnextParser.BracketOpen:
	        case CPnextParser.BraceOpen:
	        case CPnextParser.ParenOpen:
	        case CPnextParser.Dollar:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 311;
	            this.fexpr();
	            break;
	        case CPnextParser.Backslash:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 312;
	            this.lambda();
	            break;
	        case CPnextParser.SlashBackslash:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 313;
	            this.bigLambda();
	            break;
	        case CPnextParser.Let:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 314;
	            this.let_();
	            break;
	        case CPnextParser.LetRec:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 315;
	            this.letRec();
	            break;
	        case CPnextParser.Open:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 316;
	            this.open_();
	            break;
	        case CPnextParser.If:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 317;
	            this.ifElse();
	            break;
	        case CPnextParser.TraitSmall:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 318;
	            this.trait();
	            break;
	        case CPnextParser.New:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 319;
	            this.new_();
	            break;
	        case CPnextParser.ToString:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 320;
	            this.toString_();
	            break;
	        case CPnextParser.Fold:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 321;
	            this.fold();
	            break;
	        case CPnextParser.Unfold:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 322;
	            this.unfold();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda() {
	    let localctx = new LambdaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CPnextParser.RULE_lambda);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 325;
	        this.match(CPnextParser.Backslash);
	        this.state = 327; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 326;
	            this.termParam();
	            this.state = 329; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===CPnextParser.Underscore || _la===CPnextParser.Lowerid || _la===CPnextParser.BraceOpen || _la===CPnextParser.ParenOpen);
	        this.state = 331;
	        this.match(CPnextParser.Arrow);
	        this.state = 332;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bigLambda() {
	    let localctx = new BigLambdaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CPnextParser.RULE_bigLambda);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 334;
	        this.match(CPnextParser.SlashBackslash);
	        this.state = 336; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 335;
	            this.typeParam();
	            this.state = 338; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===CPnextParser.Upperid || _la===CPnextParser.ParenOpen);
	        this.state = 340;
	        this.match(CPnextParser.Dot);
	        this.state = 341;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	let_() {
	    let localctx = new Let_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CPnextParser.RULE_let_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 343;
	        this.match(CPnextParser.Let);
	        this.state = 344;
	        this.termNameDecl();
	        this.state = 348;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 345;
	                this.typeParam(); 
	            }
	            this.state = 350;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
	        }

	        this.state = 354;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Underscore || _la===CPnextParser.Lowerid || _la===CPnextParser.BraceOpen || _la===CPnextParser.ParenOpen) {
	            this.state = 351;
	            this.termParam();
	            this.state = 356;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 357;
	        this.match(CPnextParser.Assign);
	        this.state = 358;
	        this.expression();
	        this.state = 359;
	        this.match(CPnextParser.In);
	        this.state = 360;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letRec() {
	    let localctx = new LetRecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CPnextParser.RULE_letRec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.match(CPnextParser.LetRec);
	        this.state = 363;
	        this.termNameDecl();
	        this.state = 367;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 364;
	                this.typeParam(); 
	            }
	            this.state = 369;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	        }

	        this.state = 373;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Underscore || _la===CPnextParser.Lowerid || _la===CPnextParser.BraceOpen || _la===CPnextParser.ParenOpen) {
	            this.state = 370;
	            this.termParam();
	            this.state = 375;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 376;
	        this.match(CPnextParser.Colon);
	        this.state = 377;
	        this.type(0);
	        this.state = 378;
	        this.match(CPnextParser.Assign);
	        this.state = 379;
	        this.expression();
	        this.state = 380;
	        this.match(CPnextParser.In);
	        this.state = 381;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	open_() {
	    let localctx = new Open_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CPnextParser.RULE_open_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 383;
	        this.match(CPnextParser.Open);
	        this.state = 384;
	        this.expression();
	        this.state = 385;
	        this.match(CPnextParser.In);
	        this.state = 386;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifElse() {
	    let localctx = new IfElseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CPnextParser.RULE_ifElse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 388;
	        this.match(CPnextParser.If);
	        this.state = 389;
	        this.expression();
	        this.state = 390;
	        this.match(CPnextParser.Then);
	        this.state = 391;
	        this.expression();
	        this.state = 392;
	        this.match(CPnextParser.Else);
	        this.state = 393;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trait() {
	    let localctx = new TraitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CPnextParser.RULE_trait);
	    var _la = 0; // Token type
	    try {
	        this.state = 423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 395;
	            this.match(CPnextParser.TraitSmall);
	            this.state = 397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CPnextParser.BracketOpen) {
	                this.state = 396;
	                this.selfAnno();
	            }

	            this.state = 401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CPnextParser.Implements) {
	                this.state = 399;
	                this.match(CPnextParser.Implements);
	                this.state = 400;
	                this.type(0);
	            }

	            this.state = 405;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CPnextParser.Inherits) {
	                this.state = 403;
	                this.match(CPnextParser.Inherits);
	                this.state = 404;
	                this.opexpr(0);
	            }

	            this.state = 407;
	            this.match(CPnextParser.TraitArrow);
	            this.state = 408;
	            this.opexpr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 409;
	            this.match(CPnextParser.TraitSmall);
	            this.state = 411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CPnextParser.BracketOpen) {
	                this.state = 410;
	                this.selfAnno();
	            }

	            this.state = 415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CPnextParser.Inherits) {
	                this.state = 413;
	                this.match(CPnextParser.Inherits);
	                this.state = 414;
	                this.opexpr(0);
	            }

	            this.state = 419;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CPnextParser.Implements) {
	                this.state = 417;
	                this.match(CPnextParser.Implements);
	                this.state = 418;
	                this.type(0);
	            }

	            this.state = 421;
	            this.match(CPnextParser.TraitArrow);
	            this.state = 422;
	            this.opexpr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_() {
	    let localctx = new New_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CPnextParser.RULE_new_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.match(CPnextParser.New);
	        this.state = 426;
	        this.opexpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	toString_() {
	    let localctx = new ToString_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CPnextParser.RULE_toString_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 428;
	        this.match(CPnextParser.ToString);
	        this.state = 429;
	        this.dotexpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fold() {
	    let localctx = new FoldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CPnextParser.RULE_fold);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 431;
	        this.match(CPnextParser.Fold);
	        this.state = 432;
	        this.match(CPnextParser.At);
	        this.state = 433;
	        this.atype();
	        this.state = 434;
	        this.dotexpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unfold() {
	    let localctx = new UnfoldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CPnextParser.RULE_unfold);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.match(CPnextParser.Unfold);
	        this.state = 437;
	        this.match(CPnextParser.At);
	        this.state = 438;
	        this.atype();
	        this.state = 439;
	        this.dotexpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fexpr() {
	    let localctx = new FexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CPnextParser.RULE_fexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 441;
	            this.typeNameDecl();
	            break;

	        case 2:
	            this.state = 442;
	            this.dotexpr();
	            break;

	        }
	        this.state = 450;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 448;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case CPnextParser.True_:
	                case CPnextParser.False_:
	                case CPnextParser.Undefined_:
	                case CPnextParser.Lowerid:
	                case CPnextParser.Upperid:
	                case CPnextParser.Number:
	                case CPnextParser.BacktickOpen:
	                case CPnextParser.String:
	                case CPnextParser.Unit:
	                case CPnextParser.BracketOpen:
	                case CPnextParser.BraceOpen:
	                case CPnextParser.ParenOpen:
	                case CPnextParser.Dollar:
	                    this.state = 445;
	                    this.dotexpr();
	                    break;
	                case CPnextParser.At:
	                    this.state = 446;
	                    this.match(CPnextParser.At);
	                    this.state = 447;
	                    this.atype();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 452;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotexpr() {
	    let localctx = new DotexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CPnextParser.RULE_dotexpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        this.aexpr();
	        this.state = 458;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 454;
	                this.match(CPnextParser.Dot);
	                this.state = 455;
	                this.label(); 
	            }
	            this.state = 460;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aexpr() {
	    let localctx = new AexprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CPnextParser.RULE_aexpr);
	    try {
	        this.state = 478;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 461;
	            this.termName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 462;
	            this.match(CPnextParser.Number);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 463;
	            this.document();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 464;
	            this.match(CPnextParser.String);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 465;
	            this.match(CPnextParser.Unit);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 466;
	            this.match(CPnextParser.True_);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 467;
	            this.match(CPnextParser.False_);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 468;
	            this.match(CPnextParser.Undefined_);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 469;
	            this.array();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 470;
	            this.record();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 471;
	            this.recordUpdate();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 472;
	            this.match(CPnextParser.Dollar);
	            this.state = 473;
	            this.typeNameDecl();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 474;
	            this.match(CPnextParser.ParenOpen);
	            this.state = 475;
	            this.expression();
	            this.state = 476;
	            this.match(CPnextParser.ParenClose);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array() {
	    let localctx = new ArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CPnextParser.RULE_array);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 480;
	        this.match(CPnextParser.BracketOpen);
	        this.state = 486;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,43,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 481;
	                this.expression();
	                this.state = 482;
	                this.match(CPnextParser.Semicolon); 
	            }
	            this.state = 488;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,43,this._ctx);
	        }

	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CPnextParser.Open) | (1 << CPnextParser.Let) | (1 << CPnextParser.LetRec) | (1 << CPnextParser.If) | (1 << CPnextParser.TraitSmall) | (1 << CPnextParser.New) | (1 << CPnextParser.ToString) | (1 << CPnextParser.Fold) | (1 << CPnextParser.Unfold) | (1 << CPnextParser.True_) | (1 << CPnextParser.False_) | (1 << CPnextParser.Undefined_))) !== 0) || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CPnextParser.Lowerid - 36)) | (1 << (CPnextParser.Upperid - 36)) | (1 << (CPnextParser.Number - 36)) | (1 << (CPnextParser.BacktickOpen - 36)) | (1 << (CPnextParser.String - 36)) | (1 << (CPnextParser.Unit - 36)) | (1 << (CPnextParser.Minus - 36)) | (1 << (CPnextParser.Not - 36)) | (1 << (CPnextParser.Length - 36)) | (1 << (CPnextParser.BracketOpen - 36)))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CPnextParser.BraceOpen - 68)) | (1 << (CPnextParser.ParenOpen - 68)) | (1 << (CPnextParser.Backslash - 68)) | (1 << (CPnextParser.SlashBackslash - 68)) | (1 << (CPnextParser.Dollar - 68)))) !== 0)) {
	            this.state = 489;
	            this.expression();
	        }

	        this.state = 492;
	        this.match(CPnextParser.BracketClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	record() {
	    let localctx = new RecordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CPnextParser.RULE_record);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494;
	        this.match(CPnextParser.BraceOpen);
	        this.state = 504;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 498;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 495;
	                    this.recordField();
	                    break;

	                case 2:
	                    this.state = 496;
	                    this.methodPattern();
	                    break;

	                case 3:
	                    this.state = 497;
	                    this.defaultPattern();
	                    break;

	                }
	                this.state = 500;
	                this.match(CPnextParser.Semicolon); 
	            }
	            this.state = 506;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
	        }

	        this.state = 512;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CPnextParser.Override - 32)) | (1 << (CPnextParser.Underscore - 32)) | (1 << (CPnextParser.Lowerid - 32)) | (1 << (CPnextParser.Upperid - 32)))) !== 0) || _la===CPnextParser.BracketOpen || _la===CPnextParser.ParenOpen) {
	            this.state = 510;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 507;
	                this.recordField();
	                break;

	            case 2:
	                this.state = 508;
	                this.methodPattern();
	                break;

	            case 3:
	                this.state = 509;
	                this.defaultPattern();
	                break;

	            }
	        }

	        this.state = 514;
	        this.match(CPnextParser.BraceClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordField() {
	    let localctx = new RecordFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CPnextParser.RULE_recordField);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.Override) {
	            this.state = 516;
	            this.match(CPnextParser.Override);
	        }

	        this.state = 520;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.BracketOpen) {
	            this.state = 519;
	            this.selfAnno();
	        }

	        this.state = 522;
	        this.labelDecl();
	        this.state = 526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Underscore || _la===CPnextParser.Lowerid || _la===CPnextParser.BraceOpen || _la===CPnextParser.ParenOpen) {
	            this.state = 523;
	            this.termParam();
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 529;
	        this.match(CPnextParser.Assign);
	        this.state = 530;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordUpdate() {
	    let localctx = new RecordUpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CPnextParser.RULE_recordUpdate);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 532;
	        this.match(CPnextParser.BraceOpen);
	        this.state = 533;
	        this.expression();
	        this.state = 534;
	        this.match(CPnextParser.Stick);
	        this.state = 543;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 535;
	                this.labelDecl();
	                this.state = 536;
	                this.match(CPnextParser.Assign);
	                this.state = 537;
	                this.expression();
	                this.state = 539;
	                this.match(CPnextParser.Semicolon); 
	            }
	            this.state = 545;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	        this.state = 550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.Lowerid || _la===CPnextParser.Upperid) {
	            this.state = 546;
	            this.labelDecl();
	            this.state = 547;
	            this.match(CPnextParser.Assign);
	            this.state = 548;
	            this.expression();
	        }

	        this.state = 552;
	        this.match(CPnextParser.BraceClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodPattern() {
	    let localctx = new MethodPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CPnextParser.RULE_methodPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.Override) {
	            this.state = 554;
	            this.match(CPnextParser.Override);
	        }

	        this.state = 560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.BracketOpen) {
	            this.state = 557;
	            this.selfAnno();
	            this.state = 558;
	            this.match(CPnextParser.At);
	        }

	        this.state = 562;
	        this.match(CPnextParser.ParenOpen);
	        this.state = 563;
	        this.labelDecl();
	        this.state = 567;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Underscore || _la===CPnextParser.Lowerid || _la===CPnextParser.BraceOpen || _la===CPnextParser.ParenOpen) {
	            this.state = 564;
	            this.termParam();
	            this.state = 569;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 570;
	        this.match(CPnextParser.ParenClose);
	        this.state = 571;
	        this.match(CPnextParser.Dot);
	        this.state = 572;
	        this.labelDecl();
	        this.state = 576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Underscore || _la===CPnextParser.Lowerid || _la===CPnextParser.BraceOpen || _la===CPnextParser.ParenOpen) {
	            this.state = 573;
	            this.termParam();
	            this.state = 578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 579;
	        this.match(CPnextParser.Assign);
	        this.state = 580;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultPattern() {
	    let localctx = new DefaultPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CPnextParser.RULE_defaultPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.Override) {
	            this.state = 582;
	            this.match(CPnextParser.Override);
	        }

	        this.state = 587;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.Underscore:
	            this.state = 585;
	            this.match(CPnextParser.Underscore);
	            break;
	        case CPnextParser.BracketOpen:
	            this.state = 586;
	            this.selfAnno();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 589;
	        this.match(CPnextParser.Dot);
	        this.state = 590;
	        this.labelDecl();
	        this.state = 594;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Underscore || _la===CPnextParser.Lowerid || _la===CPnextParser.BraceOpen || _la===CPnextParser.ParenOpen) {
	            this.state = 591;
	            this.termParam();
	            this.state = 596;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 597;
	        this.match(CPnextParser.Assign);
	        this.state = 598;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParam() {
	    let localctx = new TypeParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CPnextParser.RULE_typeParam);
	    try {
	        this.state = 607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.Upperid:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 600;
	            this.typeNameDecl();
	            break;
	        case CPnextParser.ParenOpen:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 601;
	            this.match(CPnextParser.ParenOpen);
	            this.state = 602;
	            this.typeNameDecl();
	            this.state = 603;
	            this.match(CPnextParser.Star);
	            this.state = 604;
	            this.type(0);
	            this.state = 605;
	            this.match(CPnextParser.ParenClose);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	termParam() {
	    let localctx = new TermParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CPnextParser.RULE_termParam);
	    try {
	        this.state = 617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.Underscore:
	        case CPnextParser.Lowerid:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 609;
	            this.termId();
	            break;
	        case CPnextParser.ParenOpen:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 610;
	            this.match(CPnextParser.ParenOpen);
	            this.state = 611;
	            this.termId();
	            this.state = 612;
	            this.match(CPnextParser.Colon);
	            this.state = 613;
	            this.type(0);
	            this.state = 614;
	            this.match(CPnextParser.ParenClose);
	            break;
	        case CPnextParser.BraceOpen:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 616;
	            this.wildcard();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	termId() {
	    let localctx = new TermIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CPnextParser.RULE_termId);
	    try {
	        this.state = 621;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.Underscore:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 619;
	            this.match(CPnextParser.Underscore);
	            break;
	        case CPnextParser.Lowerid:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 620;
	            this.termNameDecl();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard() {
	    let localctx = new WildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CPnextParser.RULE_wildcard);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 623;
	        this.match(CPnextParser.BraceOpen);
	        this.state = 632;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 624;
	                this.labelDecl();
	                this.state = 625;
	                this.match(CPnextParser.Assign);
	                this.state = 626;
	                this.expression();
	                this.state = 628;
	                this.match(CPnextParser.Semicolon); 
	            }
	            this.state = 634;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
	        }

	        this.state = 639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.Lowerid || _la===CPnextParser.Upperid) {
	            this.state = 635;
	            this.labelDecl();
	            this.state = 636;
	            this.match(CPnextParser.Assign);
	            this.state = 637;
	            this.expression();
	        }

	        this.state = 641;
	        this.match(CPnextParser.DotDot);
	        this.state = 642;
	        this.match(CPnextParser.BraceClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selfAnno() {
	    let localctx = new SelfAnnoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CPnextParser.RULE_selfAnno);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 644;
	        this.match(CPnextParser.BracketOpen);
	        this.state = 645;
	        this.termNameDecl();
	        this.state = 648;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.Colon) {
	            this.state = 646;
	            this.match(CPnextParser.Colon);
	            this.state = 647;
	            this.type(0);
	        }

	        this.state = 650;
	        this.match(CPnextParser.BracketClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sort() {
	    let localctx = new SortContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CPnextParser.RULE_sort);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652;
	        this.type(0);
	        this.state = 655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CPnextParser.TraitArrow) {
	            this.state = 653;
	            this.match(CPnextParser.TraitArrow);
	            this.state = 654;
	            this.type(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNameDecl() {
	    let localctx = new TypeNameDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CPnextParser.RULE_typeNameDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 657;
	        this.match(CPnextParser.Upperid);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CPnextParser.RULE_typeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 659;
	        this.match(CPnextParser.Upperid);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	termNameDecl() {
	    let localctx = new TermNameDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CPnextParser.RULE_termNameDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        this.match(CPnextParser.Lowerid);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	termName() {
	    let localctx = new TermNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CPnextParser.RULE_termName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 663;
	        _la = this._input.LA(1);
	        if(!(_la===CPnextParser.Lowerid || _la===CPnextParser.Upperid)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelDecl() {
	    let localctx = new LabelDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CPnextParser.RULE_labelDecl);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        _la = this._input.LA(1);
	        if(!(_la===CPnextParser.Lowerid || _la===CPnextParser.Upperid)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CPnextParser.RULE_label);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 667;
	        _la = this._input.LA(1);
	        if(!(_la===CPnextParser.Lowerid || _la===CPnextParser.Upperid)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	document() {
	    let localctx = new DocumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CPnextParser.RULE_document);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 669;
	        this.match(CPnextParser.BacktickOpen);
	        this.state = 673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CPnextParser.LineBreak - 81)) | (1 << (CPnextParser.Tag - 81)) | (1 << (CPnextParser.BackslashParen - 81)) | (1 << (CPnextParser.Plaintext - 81)) | (1 << (CPnextParser.PlaintextAfterTag - 81)) | (1 << (CPnextParser.TagAfterTag - 81)) | (1 << (CPnextParser.LinebreakAfterTag - 81)) | (1 << (CPnextParser.BackslashParenAfterTag - 81)))) !== 0)) {
	            this.state = 670;
	            this.docElement();
	            this.state = 675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 676;
	        _la = this._input.LA(1);
	        if(!(_la===CPnextParser.BacktickClose || _la===CPnextParser.BacktickCloseAfterTag)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	docElement() {
	    let localctx = new DocElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CPnextParser.RULE_docElement);
	    try {
	        this.state = 682;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.Tag:
	        case CPnextParser.TagAfterTag:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 678;
	            this.command();
	            break;
	        case CPnextParser.BackslashParen:
	        case CPnextParser.BackslashParenAfterTag:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 679;
	            this.interpolation();
	            break;
	        case CPnextParser.LineBreak:
	        case CPnextParser.LinebreakAfterTag:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 680;
	            this.newline();
	            break;
	        case CPnextParser.Plaintext:
	        case CPnextParser.PlaintextAfterTag:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 681;
	            this.plaintext();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	command() {
	    let localctx = new CommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CPnextParser.RULE_command);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        _la = this._input.LA(1);
	        if(!(_la===CPnextParser.Tag || _la===CPnextParser.TagAfterTag)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 688;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (CPnextParser.ParenOpenInTag - 85)) | (1 << (CPnextParser.BraceOpenInTag - 85)) | (1 << (CPnextParser.BracketOpenInTag - 85)))) !== 0)) {
	            this.state = 685;
	            this.arg();
	            this.state = 690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interpolation() {
	    let localctx = new InterpolationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CPnextParser.RULE_interpolation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 691;
	        _la = this._input.LA(1);
	        if(!(_la===CPnextParser.BackslashParen || _la===CPnextParser.BackslashParenAfterTag)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 692;
	        this.expression();
	        this.state = 693;
	        this.match(CPnextParser.ParenClose);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newline() {
	    let localctx = new NewlineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CPnextParser.RULE_newline);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        _la = this._input.LA(1);
	        if(!(_la===CPnextParser.LineBreak || _la===CPnextParser.LinebreakAfterTag)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	plaintext() {
	    let localctx = new PlaintextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CPnextParser.RULE_plaintext);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 697;
	        _la = this._input.LA(1);
	        if(!(_la===CPnextParser.Plaintext || _la===CPnextParser.PlaintextAfterTag)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg() {
	    let localctx = new ArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CPnextParser.RULE_arg);
	    var _la = 0; // Token type
	    try {
	        this.state = 724;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CPnextParser.ParenOpenInTag:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 699;
	            this.match(CPnextParser.ParenOpenInTag);
	            this.state = 700;
	            this.expression();
	            this.state = 701;
	            this.match(CPnextParser.ParenClose);
	            break;
	        case CPnextParser.BraceOpenInTag:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 703;
	            this.match(CPnextParser.BraceOpenInTag);
	            this.state = 709;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 704;
	                    this.recordArgField();
	                    this.state = 705;
	                    this.match(CPnextParser.Semicolon); 
	                }
	                this.state = 711;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
	            }

	            this.state = 713;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CPnextParser.Lowerid || _la===CPnextParser.Upperid) {
	                this.state = 712;
	                this.recordArgField();
	            }

	            this.state = 715;
	            this.match(CPnextParser.BraceClose);
	            break;
	        case CPnextParser.BracketOpenInTag:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 716;
	            this.match(CPnextParser.BracketOpenInTag);
	            this.state = 720;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CPnextParser.LineBreak - 81)) | (1 << (CPnextParser.Tag - 81)) | (1 << (CPnextParser.BackslashParen - 81)) | (1 << (CPnextParser.Plaintext - 81)) | (1 << (CPnextParser.PlaintextAfterTag - 81)) | (1 << (CPnextParser.TagAfterTag - 81)) | (1 << (CPnextParser.LinebreakAfterTag - 81)) | (1 << (CPnextParser.BackslashParenAfterTag - 81)))) !== 0)) {
	                this.state = 717;
	                this.docElement();
	                this.state = 722;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 723;
	            _la = this._input.LA(1);
	            if(!(_la===CPnextParser.BracketCloseInDoc || _la===CPnextParser.BracketCloseAfterTag)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordArgField() {
	    let localctx = new RecordArgFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CPnextParser.RULE_recordArgField);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 726;
	        this.labelDecl();
	        this.state = 730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CPnextParser.Underscore || _la===CPnextParser.Lowerid || _la===CPnextParser.BraceOpen || _la===CPnextParser.ParenOpen) {
	            this.state = 727;
	            this.termParam();
	            this.state = 732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 733;
	        this.match(CPnextParser.Assign);
	        this.state = 734;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CPnextParser.EOF = antlr4.Token.EOF;
CPnextParser.Whitespaces = 1;
CPnextParser.LineComment = 2;
CPnextParser.BlockComment = 3;
CPnextParser.Open = 4;
CPnextParser.Type = 5;
CPnextParser.ForAll = 6;
CPnextParser.TraitCaps = 7;
CPnextParser.Mu = 8;
CPnextParser.Int = 9;
CPnextParser.Double = 10;
CPnextParser.StringType = 11;
CPnextParser.Bool = 12;
CPnextParser.Top = 13;
CPnextParser.Bot = 14;
CPnextParser.Let = 15;
CPnextParser.LetRec = 16;
CPnextParser.In = 17;
CPnextParser.If = 18;
CPnextParser.Then = 19;
CPnextParser.Else = 20;
CPnextParser.TraitSmall = 21;
CPnextParser.Implements = 22;
CPnextParser.Inherits = 23;
CPnextParser.New = 24;
CPnextParser.ToString = 25;
CPnextParser.Fold = 26;
CPnextParser.Unfold = 27;
CPnextParser.At = 28;
CPnextParser.True_ = 29;
CPnextParser.False_ = 30;
CPnextParser.Undefined_ = 31;
CPnextParser.Override = 32;
CPnextParser.Stick = 33;
CPnextParser.DotDot = 34;
CPnextParser.Underscore = 35;
CPnextParser.Lowerid = 36;
CPnextParser.Upperid = 37;
CPnextParser.Number = 38;
CPnextParser.BacktickOpen = 39;
CPnextParser.String = 40;
CPnextParser.Unit = 41;
CPnextParser.Arrow = 42;
CPnextParser.TraitArrow = 43;
CPnextParser.Intersect = 44;
CPnextParser.Plus = 45;
CPnextParser.Minus = 46;
CPnextParser.Star = 47;
CPnextParser.Divide = 48;
CPnextParser.Modulo = 49;
CPnextParser.Not = 50;
CPnextParser.And = 51;
CPnextParser.Or = 52;
CPnextParser.Append = 53;
CPnextParser.Less = 54;
CPnextParser.Greater = 55;
CPnextParser.LessEqual = 56;
CPnextParser.GreaterEqual = 57;
CPnextParser.Equal = 58;
CPnextParser.NotEqual = 59;
CPnextParser.Merge = 60;
CPnextParser.Forward = 61;
CPnextParser.Index = 62;
CPnextParser.Length = 63;
CPnextParser.Assign = 64;
CPnextParser.Newline = 65;
CPnextParser.BracketOpen = 66;
CPnextParser.BracketClose = 67;
CPnextParser.BraceOpen = 68;
CPnextParser.BraceClose = 69;
CPnextParser.ParenOpen = 70;
CPnextParser.ParenClose = 71;
CPnextParser.Semicolon = 72;
CPnextParser.Colon = 73;
CPnextParser.Backslash = 74;
CPnextParser.SlashBackslash = 75;
CPnextParser.Dot = 76;
CPnextParser.Question = 77;
CPnextParser.Dollar = 78;
CPnextParser.BacktickClose = 79;
CPnextParser.BracketCloseInDoc = 80;
CPnextParser.LineBreak = 81;
CPnextParser.Tag = 82;
CPnextParser.BackslashParen = 83;
CPnextParser.Plaintext = 84;
CPnextParser.ParenOpenInTag = 85;
CPnextParser.BraceOpenInTag = 86;
CPnextParser.BracketOpenInTag = 87;
CPnextParser.PlaintextAfterTag = 88;
CPnextParser.BracketCloseAfterTag = 89;
CPnextParser.BacktickCloseAfterTag = 90;
CPnextParser.TagAfterTag = 91;
CPnextParser.LinebreakAfterTag = 92;
CPnextParser.BackslashParenAfterTag = 93;

CPnextParser.RULE_program = 0;
CPnextParser.RULE_open = 1;
CPnextParser.RULE_definition = 2;
CPnextParser.RULE_typeDef = 3;
CPnextParser.RULE_termDef = 4;
CPnextParser.RULE_type = 5;
CPnextParser.RULE_btype = 6;
CPnextParser.RULE_atype = 7;
CPnextParser.RULE_recordType = 8;
CPnextParser.RULE_recordTypeElement = 9;
CPnextParser.RULE_expression = 10;
CPnextParser.RULE_opexpr = 11;
CPnextParser.RULE_lexpr = 12;
CPnextParser.RULE_lambda = 13;
CPnextParser.RULE_bigLambda = 14;
CPnextParser.RULE_let_ = 15;
CPnextParser.RULE_letRec = 16;
CPnextParser.RULE_open_ = 17;
CPnextParser.RULE_ifElse = 18;
CPnextParser.RULE_trait = 19;
CPnextParser.RULE_new_ = 20;
CPnextParser.RULE_toString_ = 21;
CPnextParser.RULE_fold = 22;
CPnextParser.RULE_unfold = 23;
CPnextParser.RULE_fexpr = 24;
CPnextParser.RULE_dotexpr = 25;
CPnextParser.RULE_aexpr = 26;
CPnextParser.RULE_array = 27;
CPnextParser.RULE_record = 28;
CPnextParser.RULE_recordField = 29;
CPnextParser.RULE_recordUpdate = 30;
CPnextParser.RULE_methodPattern = 31;
CPnextParser.RULE_defaultPattern = 32;
CPnextParser.RULE_typeParam = 33;
CPnextParser.RULE_termParam = 34;
CPnextParser.RULE_termId = 35;
CPnextParser.RULE_wildcard = 36;
CPnextParser.RULE_selfAnno = 37;
CPnextParser.RULE_sort = 38;
CPnextParser.RULE_typeNameDecl = 39;
CPnextParser.RULE_typeName = 40;
CPnextParser.RULE_termNameDecl = 41;
CPnextParser.RULE_termName = 42;
CPnextParser.RULE_labelDecl = 43;
CPnextParser.RULE_label = 44;
CPnextParser.RULE_document = 45;
CPnextParser.RULE_docElement = 46;
CPnextParser.RULE_command = 47;
CPnextParser.RULE_interpolation = 48;
CPnextParser.RULE_newline = 49;
CPnextParser.RULE_plaintext = 50;
CPnextParser.RULE_arg = 51;
CPnextParser.RULE_recordArgField = 52;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_program;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	open = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpenContext);
	    } else {
	        return this.getTypedRuleContext(OpenContext,i);
	    }
	};

	definition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefinitionContext);
	    } else {
	        return this.getTypedRuleContext(DefinitionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_open;
    }

	Open() {
	    return this.getToken(CPnextParser.Open, 0);
	};

	Semicolon() {
	    return this.getToken(CPnextParser.Semicolon, 0);
	};

	Upperid = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Upperid);
	    } else {
	        return this.getToken(CPnextParser.Upperid, i);
	    }
	};


	Lowerid = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Lowerid);
	    } else {
	        return this.getToken(CPnextParser.Lowerid, i);
	    }
	};


	Divide = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Divide);
	    } else {
	        return this.getToken(CPnextParser.Divide, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitOpen(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_definition;
    }

	typeDef() {
	    return this.getTypedRuleContext(TypeDefContext,0);
	};

	termDef() {
	    return this.getTypedRuleContext(TermDefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_typeDef;
    }

	Type() {
	    return this.getToken(CPnextParser.Type, 0);
	};

	typeNameDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNameDeclContext);
	    } else {
	        return this.getTypedRuleContext(TypeNameDeclContext,i);
	    }
	};

	Assign() {
	    return this.getToken(CPnextParser.Assign, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Semicolon() {
	    return this.getToken(CPnextParser.Semicolon, 0);
	};

	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Less);
	    } else {
	        return this.getToken(CPnextParser.Less, i);
	    }
	};


	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Greater);
	    } else {
	        return this.getToken(CPnextParser.Greater, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTypeDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_termDef;
    }

	termNameDecl() {
	    return this.getTypedRuleContext(TermNameDeclContext,0);
	};

	Assign() {
	    return this.getToken(CPnextParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Semicolon() {
	    return this.getToken(CPnextParser.Semicolon, 0);
	};

	typeParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParamContext);
	    } else {
	        return this.getTypedRuleContext(TypeParamContext,i);
	    }
	};

	termParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermParamContext);
	    } else {
	        return this.getTypedRuleContext(TermParamContext,i);
	    }
	};

	Colon() {
	    return this.getToken(CPnextParser.Colon, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTermDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_type;
    }

	btype() {
	    return this.getTypedRuleContext(BtypeContext,0);
	};

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	Intersect() {
	    return this.getToken(CPnextParser.Intersect, 0);
	};

	Arrow() {
	    return this.getToken(CPnextParser.Arrow, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_btype;
    }

	atype = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtypeContext);
	    } else {
	        return this.getTypedRuleContext(AtypeContext,i);
	    }
	};

	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Less);
	    } else {
	        return this.getToken(CPnextParser.Less, i);
	    }
	};


	sort = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortContext);
	    } else {
	        return this.getTypedRuleContext(SortContext,i);
	    }
	};

	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Greater);
	    } else {
	        return this.getToken(CPnextParser.Greater, i);
	    }
	};


	ForAll() {
	    return this.getToken(CPnextParser.ForAll, 0);
	};

	Dot() {
	    return this.getToken(CPnextParser.Dot, 0);
	};

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	typeParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParamContext);
	    } else {
	        return this.getTypedRuleContext(TypeParamContext,i);
	    }
	};

	TraitCaps() {
	    return this.getToken(CPnextParser.TraitCaps, 0);
	};

	TraitArrow() {
	    return this.getToken(CPnextParser.TraitArrow, 0);
	};

	Mu() {
	    return this.getToken(CPnextParser.Mu, 0);
	};

	typeNameDecl() {
	    return this.getTypedRuleContext(TypeNameDeclContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitBtype(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_atype;
    }

	Int() {
	    return this.getToken(CPnextParser.Int, 0);
	};

	Double() {
	    return this.getToken(CPnextParser.Double, 0);
	};

	StringType() {
	    return this.getToken(CPnextParser.StringType, 0);
	};

	Bool() {
	    return this.getToken(CPnextParser.Bool, 0);
	};

	Top() {
	    return this.getToken(CPnextParser.Top, 0);
	};

	Bot() {
	    return this.getToken(CPnextParser.Bot, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	recordType() {
	    return this.getTypedRuleContext(RecordTypeContext,0);
	};

	BracketOpen() {
	    return this.getToken(CPnextParser.BracketOpen, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	BracketClose() {
	    return this.getToken(CPnextParser.BracketClose, 0);
	};

	ParenOpen() {
	    return this.getToken(CPnextParser.ParenOpen, 0);
	};

	ParenClose() {
	    return this.getToken(CPnextParser.ParenClose, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitAtype(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_recordType;
    }

	BraceOpen() {
	    return this.getToken(CPnextParser.BraceOpen, 0);
	};

	BraceClose() {
	    return this.getToken(CPnextParser.BraceClose, 0);
	};

	recordTypeElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordTypeElementContext);
	    } else {
	        return this.getTypedRuleContext(RecordTypeElementContext,i);
	    }
	};

	Semicolon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Semicolon);
	    } else {
	        return this.getToken(CPnextParser.Semicolon, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitRecordType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordTypeElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_recordTypeElement;
    }

	labelDecl() {
	    return this.getTypedRuleContext(LabelDeclContext,0);
	};

	Colon() {
	    return this.getToken(CPnextParser.Colon, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Question() {
	    return this.getToken(CPnextParser.Question, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitRecordTypeElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_expression;
    }

	opexpr() {
	    return this.getTypedRuleContext(OpexprContext,0);
	};

	Colon() {
	    return this.getToken(CPnextParser.Colon, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Backslash() {
	    return this.getToken(CPnextParser.Backslash, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_opexpr;
    }

	lexpr() {
	    return this.getTypedRuleContext(LexprContext,0);
	};

	opexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpexprContext);
	    } else {
	        return this.getTypedRuleContext(OpexprContext,i);
	    }
	};

	Minus() {
	    return this.getToken(CPnextParser.Minus, 0);
	};

	Not() {
	    return this.getToken(CPnextParser.Not, 0);
	};

	Length() {
	    return this.getToken(CPnextParser.Length, 0);
	};

	Index() {
	    return this.getToken(CPnextParser.Index, 0);
	};

	Modulo() {
	    return this.getToken(CPnextParser.Modulo, 0);
	};

	Divide() {
	    return this.getToken(CPnextParser.Divide, 0);
	};

	Star() {
	    return this.getToken(CPnextParser.Star, 0);
	};

	Plus() {
	    return this.getToken(CPnextParser.Plus, 0);
	};

	Append() {
	    return this.getToken(CPnextParser.Append, 0);
	};

	Less() {
	    return this.getToken(CPnextParser.Less, 0);
	};

	Greater() {
	    return this.getToken(CPnextParser.Greater, 0);
	};

	LessEqual() {
	    return this.getToken(CPnextParser.LessEqual, 0);
	};

	GreaterEqual() {
	    return this.getToken(CPnextParser.GreaterEqual, 0);
	};

	Equal() {
	    return this.getToken(CPnextParser.Equal, 0);
	};

	NotEqual() {
	    return this.getToken(CPnextParser.NotEqual, 0);
	};

	And() {
	    return this.getToken(CPnextParser.And, 0);
	};

	Or() {
	    return this.getToken(CPnextParser.Or, 0);
	};

	Forward() {
	    return this.getToken(CPnextParser.Forward, 0);
	};

	Merge() {
	    return this.getToken(CPnextParser.Merge, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitOpexpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_lexpr;
    }

	fexpr() {
	    return this.getTypedRuleContext(FexprContext,0);
	};

	lambda() {
	    return this.getTypedRuleContext(LambdaContext,0);
	};

	bigLambda() {
	    return this.getTypedRuleContext(BigLambdaContext,0);
	};

	let_() {
	    return this.getTypedRuleContext(Let_Context,0);
	};

	letRec() {
	    return this.getTypedRuleContext(LetRecContext,0);
	};

	open_() {
	    return this.getTypedRuleContext(Open_Context,0);
	};

	ifElse() {
	    return this.getTypedRuleContext(IfElseContext,0);
	};

	trait() {
	    return this.getTypedRuleContext(TraitContext,0);
	};

	new_() {
	    return this.getTypedRuleContext(New_Context,0);
	};

	toString_() {
	    return this.getTypedRuleContext(ToString_Context,0);
	};

	fold() {
	    return this.getTypedRuleContext(FoldContext,0);
	};

	unfold() {
	    return this.getTypedRuleContext(UnfoldContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitLexpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_lambda;
    }

	Backslash() {
	    return this.getToken(CPnextParser.Backslash, 0);
	};

	Arrow() {
	    return this.getToken(CPnextParser.Arrow, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	termParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermParamContext);
	    } else {
	        return this.getTypedRuleContext(TermParamContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitLambda(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BigLambdaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_bigLambda;
    }

	SlashBackslash() {
	    return this.getToken(CPnextParser.SlashBackslash, 0);
	};

	Dot() {
	    return this.getToken(CPnextParser.Dot, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	typeParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParamContext);
	    } else {
	        return this.getTypedRuleContext(TypeParamContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitBigLambda(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Let_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_let_;
    }

	Let() {
	    return this.getToken(CPnextParser.Let, 0);
	};

	termNameDecl() {
	    return this.getTypedRuleContext(TermNameDeclContext,0);
	};

	Assign() {
	    return this.getToken(CPnextParser.Assign, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	In() {
	    return this.getToken(CPnextParser.In, 0);
	};

	typeParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParamContext);
	    } else {
	        return this.getTypedRuleContext(TypeParamContext,i);
	    }
	};

	termParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermParamContext);
	    } else {
	        return this.getTypedRuleContext(TermParamContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitLet_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LetRecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_letRec;
    }

	LetRec() {
	    return this.getToken(CPnextParser.LetRec, 0);
	};

	termNameDecl() {
	    return this.getTypedRuleContext(TermNameDeclContext,0);
	};

	Colon() {
	    return this.getToken(CPnextParser.Colon, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Assign() {
	    return this.getToken(CPnextParser.Assign, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	In() {
	    return this.getToken(CPnextParser.In, 0);
	};

	typeParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParamContext);
	    } else {
	        return this.getTypedRuleContext(TypeParamContext,i);
	    }
	};

	termParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermParamContext);
	    } else {
	        return this.getTypedRuleContext(TermParamContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitLetRec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Open_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_open_;
    }

	Open() {
	    return this.getToken(CPnextParser.Open, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	In() {
	    return this.getToken(CPnextParser.In, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitOpen_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfElseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_ifElse;
    }

	If() {
	    return this.getToken(CPnextParser.If, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Then() {
	    return this.getToken(CPnextParser.Then, 0);
	};

	Else() {
	    return this.getToken(CPnextParser.Else, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitIfElse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TraitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_trait;
    }

	TraitSmall() {
	    return this.getToken(CPnextParser.TraitSmall, 0);
	};

	TraitArrow() {
	    return this.getToken(CPnextParser.TraitArrow, 0);
	};

	opexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OpexprContext);
	    } else {
	        return this.getTypedRuleContext(OpexprContext,i);
	    }
	};

	selfAnno() {
	    return this.getTypedRuleContext(SelfAnnoContext,0);
	};

	Implements() {
	    return this.getToken(CPnextParser.Implements, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	Inherits() {
	    return this.getToken(CPnextParser.Inherits, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTrait(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class New_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_new_;
    }

	New() {
	    return this.getToken(CPnextParser.New, 0);
	};

	opexpr() {
	    return this.getTypedRuleContext(OpexprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitNew_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ToString_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_toString_;
    }

	ToString() {
	    return this.getToken(CPnextParser.ToString, 0);
	};

	dotexpr() {
	    return this.getTypedRuleContext(DotexprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitToString_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FoldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_fold;
    }

	Fold() {
	    return this.getToken(CPnextParser.Fold, 0);
	};

	At() {
	    return this.getToken(CPnextParser.At, 0);
	};

	atype() {
	    return this.getTypedRuleContext(AtypeContext,0);
	};

	dotexpr() {
	    return this.getTypedRuleContext(DotexprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitFold(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnfoldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_unfold;
    }

	Unfold() {
	    return this.getToken(CPnextParser.Unfold, 0);
	};

	At() {
	    return this.getToken(CPnextParser.At, 0);
	};

	atype() {
	    return this.getTypedRuleContext(AtypeContext,0);
	};

	dotexpr() {
	    return this.getTypedRuleContext(DotexprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitUnfold(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_fexpr;
    }

	typeNameDecl() {
	    return this.getTypedRuleContext(TypeNameDeclContext,0);
	};

	dotexpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DotexprContext);
	    } else {
	        return this.getTypedRuleContext(DotexprContext,i);
	    }
	};

	At = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.At);
	    } else {
	        return this.getToken(CPnextParser.At, i);
	    }
	};


	atype = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AtypeContext);
	    } else {
	        return this.getTypedRuleContext(AtypeContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitFexpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DotexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_dotexpr;
    }

	aexpr() {
	    return this.getTypedRuleContext(AexprContext,0);
	};

	Dot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Dot);
	    } else {
	        return this.getToken(CPnextParser.Dot, i);
	    }
	};


	label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelContext);
	    } else {
	        return this.getTypedRuleContext(LabelContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitDotexpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AexprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_aexpr;
    }

	termName() {
	    return this.getTypedRuleContext(TermNameContext,0);
	};

	Number() {
	    return this.getToken(CPnextParser.Number, 0);
	};

	document() {
	    return this.getTypedRuleContext(DocumentContext,0);
	};

	String() {
	    return this.getToken(CPnextParser.String, 0);
	};

	Unit() {
	    return this.getToken(CPnextParser.Unit, 0);
	};

	True_() {
	    return this.getToken(CPnextParser.True_, 0);
	};

	False_() {
	    return this.getToken(CPnextParser.False_, 0);
	};

	Undefined_() {
	    return this.getToken(CPnextParser.Undefined_, 0);
	};

	array() {
	    return this.getTypedRuleContext(ArrayContext,0);
	};

	record() {
	    return this.getTypedRuleContext(RecordContext,0);
	};

	recordUpdate() {
	    return this.getTypedRuleContext(RecordUpdateContext,0);
	};

	Dollar() {
	    return this.getToken(CPnextParser.Dollar, 0);
	};

	typeNameDecl() {
	    return this.getTypedRuleContext(TypeNameDeclContext,0);
	};

	ParenOpen() {
	    return this.getToken(CPnextParser.ParenOpen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ParenClose() {
	    return this.getToken(CPnextParser.ParenClose, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitAexpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_array;
    }

	BracketOpen() {
	    return this.getToken(CPnextParser.BracketOpen, 0);
	};

	BracketClose() {
	    return this.getToken(CPnextParser.BracketClose, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Semicolon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Semicolon);
	    } else {
	        return this.getToken(CPnextParser.Semicolon, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitArray(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_record;
    }

	BraceOpen() {
	    return this.getToken(CPnextParser.BraceOpen, 0);
	};

	BraceClose() {
	    return this.getToken(CPnextParser.BraceClose, 0);
	};

	Semicolon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Semicolon);
	    } else {
	        return this.getToken(CPnextParser.Semicolon, i);
	    }
	};


	recordField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordFieldContext);
	    } else {
	        return this.getTypedRuleContext(RecordFieldContext,i);
	    }
	};

	methodPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodPatternContext);
	    } else {
	        return this.getTypedRuleContext(MethodPatternContext,i);
	    }
	};

	defaultPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefaultPatternContext);
	    } else {
	        return this.getTypedRuleContext(DefaultPatternContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitRecord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_recordField;
    }

	labelDecl() {
	    return this.getTypedRuleContext(LabelDeclContext,0);
	};

	Assign() {
	    return this.getToken(CPnextParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Override() {
	    return this.getToken(CPnextParser.Override, 0);
	};

	selfAnno() {
	    return this.getTypedRuleContext(SelfAnnoContext,0);
	};

	termParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermParamContext);
	    } else {
	        return this.getTypedRuleContext(TermParamContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitRecordField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordUpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_recordUpdate;
    }

	BraceOpen() {
	    return this.getToken(CPnextParser.BraceOpen, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Stick() {
	    return this.getToken(CPnextParser.Stick, 0);
	};

	BraceClose() {
	    return this.getToken(CPnextParser.BraceClose, 0);
	};

	Semicolon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Semicolon);
	    } else {
	        return this.getToken(CPnextParser.Semicolon, i);
	    }
	};


	labelDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelDeclContext);
	    } else {
	        return this.getTypedRuleContext(LabelDeclContext,i);
	    }
	};

	Assign = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Assign);
	    } else {
	        return this.getToken(CPnextParser.Assign, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitRecordUpdate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_methodPattern;
    }

	ParenOpen() {
	    return this.getToken(CPnextParser.ParenOpen, 0);
	};

	labelDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelDeclContext);
	    } else {
	        return this.getTypedRuleContext(LabelDeclContext,i);
	    }
	};

	ParenClose() {
	    return this.getToken(CPnextParser.ParenClose, 0);
	};

	Dot() {
	    return this.getToken(CPnextParser.Dot, 0);
	};

	Assign() {
	    return this.getToken(CPnextParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Override() {
	    return this.getToken(CPnextParser.Override, 0);
	};

	selfAnno() {
	    return this.getTypedRuleContext(SelfAnnoContext,0);
	};

	At() {
	    return this.getToken(CPnextParser.At, 0);
	};

	termParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermParamContext);
	    } else {
	        return this.getTypedRuleContext(TermParamContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitMethodPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_defaultPattern;
    }

	Dot() {
	    return this.getToken(CPnextParser.Dot, 0);
	};

	labelDecl() {
	    return this.getTypedRuleContext(LabelDeclContext,0);
	};

	Assign() {
	    return this.getToken(CPnextParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Underscore() {
	    return this.getToken(CPnextParser.Underscore, 0);
	};

	selfAnno() {
	    return this.getTypedRuleContext(SelfAnnoContext,0);
	};

	Override() {
	    return this.getToken(CPnextParser.Override, 0);
	};

	termParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermParamContext);
	    } else {
	        return this.getTypedRuleContext(TermParamContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitDefaultPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_typeParam;
    }

	typeNameDecl() {
	    return this.getTypedRuleContext(TypeNameDeclContext,0);
	};

	ParenOpen() {
	    return this.getToken(CPnextParser.ParenOpen, 0);
	};

	Star() {
	    return this.getToken(CPnextParser.Star, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	ParenClose() {
	    return this.getToken(CPnextParser.ParenClose, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTypeParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_termParam;
    }

	termId() {
	    return this.getTypedRuleContext(TermIdContext,0);
	};

	ParenOpen() {
	    return this.getToken(CPnextParser.ParenOpen, 0);
	};

	Colon() {
	    return this.getToken(CPnextParser.Colon, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	ParenClose() {
	    return this.getToken(CPnextParser.ParenClose, 0);
	};

	wildcard() {
	    return this.getTypedRuleContext(WildcardContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTermParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_termId;
    }

	Underscore() {
	    return this.getToken(CPnextParser.Underscore, 0);
	};

	termNameDecl() {
	    return this.getTypedRuleContext(TermNameDeclContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTermId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_wildcard;
    }

	BraceOpen() {
	    return this.getToken(CPnextParser.BraceOpen, 0);
	};

	DotDot() {
	    return this.getToken(CPnextParser.DotDot, 0);
	};

	BraceClose() {
	    return this.getToken(CPnextParser.BraceClose, 0);
	};

	Semicolon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Semicolon);
	    } else {
	        return this.getToken(CPnextParser.Semicolon, i);
	    }
	};


	labelDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelDeclContext);
	    } else {
	        return this.getTypedRuleContext(LabelDeclContext,i);
	    }
	};

	Assign = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Assign);
	    } else {
	        return this.getToken(CPnextParser.Assign, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitWildcard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelfAnnoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_selfAnno;
    }

	BracketOpen() {
	    return this.getToken(CPnextParser.BracketOpen, 0);
	};

	termNameDecl() {
	    return this.getTypedRuleContext(TermNameDeclContext,0);
	};

	BracketClose() {
	    return this.getToken(CPnextParser.BracketClose, 0);
	};

	Colon() {
	    return this.getToken(CPnextParser.Colon, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitSelfAnno(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SortContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_sort;
    }

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	TraitArrow() {
	    return this.getToken(CPnextParser.TraitArrow, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitSort(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeNameDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_typeNameDecl;
    }

	Upperid() {
	    return this.getToken(CPnextParser.Upperid, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTypeNameDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_typeName;
    }

	Upperid() {
	    return this.getToken(CPnextParser.Upperid, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermNameDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_termNameDecl;
    }

	Lowerid() {
	    return this.getToken(CPnextParser.Lowerid, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTermNameDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_termName;
    }

	Lowerid() {
	    return this.getToken(CPnextParser.Lowerid, 0);
	};

	Upperid() {
	    return this.getToken(CPnextParser.Upperid, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitTermName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_labelDecl;
    }

	Lowerid() {
	    return this.getToken(CPnextParser.Lowerid, 0);
	};

	Upperid() {
	    return this.getToken(CPnextParser.Upperid, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitLabelDecl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_label;
    }

	Lowerid() {
	    return this.getToken(CPnextParser.Lowerid, 0);
	};

	Upperid() {
	    return this.getToken(CPnextParser.Upperid, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DocumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_document;
    }

	BacktickOpen() {
	    return this.getToken(CPnextParser.BacktickOpen, 0);
	};

	BacktickClose() {
	    return this.getToken(CPnextParser.BacktickClose, 0);
	};

	BacktickCloseAfterTag() {
	    return this.getToken(CPnextParser.BacktickCloseAfterTag, 0);
	};

	docElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DocElementContext);
	    } else {
	        return this.getTypedRuleContext(DocElementContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitDocument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DocElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_docElement;
    }

	command() {
	    return this.getTypedRuleContext(CommandContext,0);
	};

	interpolation() {
	    return this.getTypedRuleContext(InterpolationContext,0);
	};

	newline() {
	    return this.getTypedRuleContext(NewlineContext,0);
	};

	plaintext() {
	    return this.getTypedRuleContext(PlaintextContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitDocElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_command;
    }

	Tag() {
	    return this.getToken(CPnextParser.Tag, 0);
	};

	TagAfterTag() {
	    return this.getToken(CPnextParser.TagAfterTag, 0);
	};

	arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgContext);
	    } else {
	        return this.getTypedRuleContext(ArgContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitCommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterpolationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_interpolation;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ParenClose() {
	    return this.getToken(CPnextParser.ParenClose, 0);
	};

	BackslashParen() {
	    return this.getToken(CPnextParser.BackslashParen, 0);
	};

	BackslashParenAfterTag() {
	    return this.getToken(CPnextParser.BackslashParenAfterTag, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitInterpolation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewlineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_newline;
    }

	LineBreak() {
	    return this.getToken(CPnextParser.LineBreak, 0);
	};

	LinebreakAfterTag() {
	    return this.getToken(CPnextParser.LinebreakAfterTag, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitNewline(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlaintextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_plaintext;
    }

	Plaintext() {
	    return this.getToken(CPnextParser.Plaintext, 0);
	};

	PlaintextAfterTag() {
	    return this.getToken(CPnextParser.PlaintextAfterTag, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitPlaintext(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_arg;
    }

	ParenOpenInTag() {
	    return this.getToken(CPnextParser.ParenOpenInTag, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ParenClose() {
	    return this.getToken(CPnextParser.ParenClose, 0);
	};

	BraceOpenInTag() {
	    return this.getToken(CPnextParser.BraceOpenInTag, 0);
	};

	BraceClose() {
	    return this.getToken(CPnextParser.BraceClose, 0);
	};

	recordArgField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordArgFieldContext);
	    } else {
	        return this.getTypedRuleContext(RecordArgFieldContext,i);
	    }
	};

	Semicolon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPnextParser.Semicolon);
	    } else {
	        return this.getToken(CPnextParser.Semicolon, i);
	    }
	};


	BracketOpenInTag() {
	    return this.getToken(CPnextParser.BracketOpenInTag, 0);
	};

	BracketCloseInDoc() {
	    return this.getToken(CPnextParser.BracketCloseInDoc, 0);
	};

	BracketCloseAfterTag() {
	    return this.getToken(CPnextParser.BracketCloseAfterTag, 0);
	};

	docElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DocElementContext);
	    } else {
	        return this.getTypedRuleContext(DocElementContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RecordArgFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPnextParser.RULE_recordArgField;
    }

	labelDecl() {
	    return this.getTypedRuleContext(LabelDeclContext,0);
	};

	Assign() {
	    return this.getToken(CPnextParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	termParam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TermParamContext);
	    } else {
	        return this.getTypedRuleContext(TermParamContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof CPnextParserVisitor ) {
	        return visitor.visitRecordArgField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




CPnextParser.ProgramContext = ProgramContext; 
CPnextParser.OpenContext = OpenContext; 
CPnextParser.DefinitionContext = DefinitionContext; 
CPnextParser.TypeDefContext = TypeDefContext; 
CPnextParser.TermDefContext = TermDefContext; 
CPnextParser.TypeContext = TypeContext; 
CPnextParser.BtypeContext = BtypeContext; 
CPnextParser.AtypeContext = AtypeContext; 
CPnextParser.RecordTypeContext = RecordTypeContext; 
CPnextParser.RecordTypeElementContext = RecordTypeElementContext; 
CPnextParser.ExpressionContext = ExpressionContext; 
CPnextParser.OpexprContext = OpexprContext; 
CPnextParser.LexprContext = LexprContext; 
CPnextParser.LambdaContext = LambdaContext; 
CPnextParser.BigLambdaContext = BigLambdaContext; 
CPnextParser.Let_Context = Let_Context; 
CPnextParser.LetRecContext = LetRecContext; 
CPnextParser.Open_Context = Open_Context; 
CPnextParser.IfElseContext = IfElseContext; 
CPnextParser.TraitContext = TraitContext; 
CPnextParser.New_Context = New_Context; 
CPnextParser.ToString_Context = ToString_Context; 
CPnextParser.FoldContext = FoldContext; 
CPnextParser.UnfoldContext = UnfoldContext; 
CPnextParser.FexprContext = FexprContext; 
CPnextParser.DotexprContext = DotexprContext; 
CPnextParser.AexprContext = AexprContext; 
CPnextParser.ArrayContext = ArrayContext; 
CPnextParser.RecordContext = RecordContext; 
CPnextParser.RecordFieldContext = RecordFieldContext; 
CPnextParser.RecordUpdateContext = RecordUpdateContext; 
CPnextParser.MethodPatternContext = MethodPatternContext; 
CPnextParser.DefaultPatternContext = DefaultPatternContext; 
CPnextParser.TypeParamContext = TypeParamContext; 
CPnextParser.TermParamContext = TermParamContext; 
CPnextParser.TermIdContext = TermIdContext; 
CPnextParser.WildcardContext = WildcardContext; 
CPnextParser.SelfAnnoContext = SelfAnnoContext; 
CPnextParser.SortContext = SortContext; 
CPnextParser.TypeNameDeclContext = TypeNameDeclContext; 
CPnextParser.TypeNameContext = TypeNameContext; 
CPnextParser.TermNameDeclContext = TermNameDeclContext; 
CPnextParser.TermNameContext = TermNameContext; 
CPnextParser.LabelDeclContext = LabelDeclContext; 
CPnextParser.LabelContext = LabelContext; 
CPnextParser.DocumentContext = DocumentContext; 
CPnextParser.DocElementContext = DocElementContext; 
CPnextParser.CommandContext = CommandContext; 
CPnextParser.InterpolationContext = InterpolationContext; 
CPnextParser.NewlineContext = NewlineContext; 
CPnextParser.PlaintextContext = PlaintextContext; 
CPnextParser.ArgContext = ArgContext; 
CPnextParser.RecordArgFieldContext = RecordArgFieldContext; 
