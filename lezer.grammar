@precedence {
  index @left
  times @left
  plus @left
  append @left
  comp @left
  and @right
  or @right
  forward @left
  merge @left
  intersect @left
  arrow @right
}

@top Program { open* definition* expression }

open { kw<"open"> (lowerid | upperid) ";" }

definition { TypeDef | TermDef }

TypeDef {
  kw<"type"> TypeNameDecl angles<TypeNameDecl>* TypeNameDecl* "=" type ";"
}

TermDef {
  TermNameDecl ~conflict typeParam* termParam* (":" type)? "=" expression ";"
}

type {
  type !arrow TypeOp<"->"> type |
  type !intersect TypeOp<"&"> type |
  kw<"forall"> typeParam+ "." type |
  kw<"mu"> TypeNameDecl "." type |
  kW<"Trait"> angles<sort> |
  atype (atype | angles<sort>)*
}

atype {
  kW<"Int"> | kW<"Double"> | kW<"String"> | kW<"Bool"> | kW<"Top"> | kW<"Bot"> |
  TypeName | RecordType | brackets<type> | parens<type>
}

RecordType { braces<sepEndBySemi<LabelDecl "?"? ":" type>> }

expression { opexpr ~conflict (":" type | "\\" type)? }

opexpr {
  lexpr | minus opexpr | LogicOp<"!"> opexpr | LengthOp opexpr |
  opexpr !index IndexOp opexpr |
  opexpr !times ArithOp<"*" | "/" | "%"> opexpr |
  opexpr !plus (ArithOp<"+"> | minus) opexpr |
  opexpr !append AppendOp opexpr |
  opexpr !comp CompareOp opexpr |
  opexpr !and LogicOp<"&&"> opexpr |
  opexpr !or LogicOp<"||"> opexpr |
  opexpr !forward ForwardOp opexpr |
  opexpr !merge MergeOp opexpr
}

lexpr {
  fexpr | Lambda { "\\" termParam+ "->" expression } |
  BigLambda { "/\\" typeParam+ "." expression } |
  Let { kw<"let"> TermNameDecl typeParam* termParam* "=" expression kw<"in"> expression } |
  LetRec { kw<"letrec"> TermNameDecl typeParam* termParam* ":" type "=" expression kw<"in"> expression } |
  Open { kw<"open"> expression kw<"in"> expression } |
  IfElse { kw<"if"> expression kw<"then"> expression kw<"else"> expression } |
  Trait { kw<"trait"> SelfAnno? (kw<"implements"> type)? (kw<"inherits"> opexpr)? (kw<"implements"> type)? "=>" opexpr } |
  New { kw<"new"> opexpr } | ToString { kw<"toString"> dotexpr } |
  kw<"fold"> "@" atype dotexpr | kw<"unfold"> "@" atype dotexpr
}

fexpr { dotexpr (dotexpr | "@" atype)* }

dotexpr { aexpr ("." Label)* }

aexpr {
  TermName | Number | String | Document | Unit |
  kw<"true"> | kw<"false"> | kw<"undefined"> |
  Array { brackets<sepEndBySemi<expression>> } |
  Record | RecordUpdate | "$" CtorName | parens<expression>
}

Record {
  braces<sepEndBySemi<
    kw<"override">? RecordField |
    kw<"override">? MethodPattern |
    (underscore | SelfAnno) "." RecordField
  >>
}

RecordField {
  LabelDecl termParam* "=" expression
}

MethodPattern {
  (SelfAnno "@")? parens<LabelDecl termParam*> "." RecordField
}

RecordUpdate {
  braces<TermName "|" sepEndBySemi<LabelDecl "=" expression>>
}

typeParam { TypeNameDecl | parens<TypeNameDecl "*" type> }
termParam { termId | parens<termId ":" type> | wildcard }
termId { underscore | TermNameDecl }
wildcard { braces<(LabelDecl "=" expression ";")* ".."> }
SelfAnno { brackets<TermNameDecl (":" type)?> }

kw<word> { @specialize[@name={word}]<lowerid, word> }
kW<word> { @specialize[@name={word}]<upperid, word> }

braces<contents> { "{" contents "}" }
parens<contents> { "(" contents ")" }
brackets<contents> { "[" contents "]" }
angles<contents> { "<" contents ">" }

sepEndBySemi<clause> { (clause ";")* clause? }
sort { atype ("=>" atype)? }

TypeNameDecl { upperid }
TypeName { upperid }
TermNameDecl { lowerid }
CtorName { upperid }
TermName { lowerid | upperid }
LabelDecl { lowerid | upperid }
Label { lowerid | upperid }

@skip { whitespace | LineComment | BlockComment }

@tokens {

  whitespace { std.whitespace+ }

  LineComment { "--" ![\n]* }

  BlockComment { "{-" blockCommentRest }
  blockCommentRest { "-" blockCommentAfterHyphen | ![-] blockCommentRest }
  blockCommentAfterHyphen { "}" | blockCommentRest }

  underscore { "_" }
  idChar { std.asciiLetter | std.digit | underscore | "'" }
  lowerid { std.asciiLowercase idChar* }
  upperid { std.asciiUppercase idChar* }

  octit { $[0-7] }
  hexit { std.digit | $[a-fA-F] }
  Number {
    std.digit+ ("." std.digit+)? (("e" | "E") ("+" | "-")? std.digit+)? |
    "0x" hexit+ | "0X" hexit+ |
    "0o" octit+ | "0O" octit+
  }

  Document { '`' ![`]* '`' }

  String { '"' (![\\\n"] | "\\" _)* '"'? }

  Unit { "()" }

  "(" ")" "{" "}" "[" "]" "<" ">"
  ".." "." ";" ":" "*" "\\" "/\\" "@" "%" "$" "?"
  "=" "->" "=>"[@name=TraitArrow]

  TypeOp<op> { op }
  ArithOp<op> { op }
  LogicOp<op> { op }
  AppendOp { "++" }
  CompareOp { "<" "="? | ">" "="? | "==" | "!=" }
  MergeOp { "," | ",," }
  ForwardOp { "^" }
  IndexOp { "!!" }
  LengthOp { "#" }

  minus[@name=ArithOp] { "-" }

  @precedence { LineComment, minus }
  @precedence { BlockComment, "{" }
  @precedence { CompareOp, "<" }

}
